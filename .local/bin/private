#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Mount or unmount encrypted private directory.

		Usage:
		  $(self) [options] [--] <action>

		Options:
		  -h  Print this help.

		Action:
		  status   Print directories and mount status.
		  mount    Mount private directory. Directories are created
		           and encryption is configured if they do not exist.
		  unmount  Unmout private directory.

		Environment variables:
		  PRIVATE_ENCRYPTED_DIR  Path to a directory with encrypted data.
		  PRIVATE_DECRYPTED_DIR  Path to a directory with decrypted data.
	EOT
}

main() {
  local opt

  while getopts ":h" opt; do
    case "$opt" in
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  [[ $# -eq 0 ]] && die_missing_arg
  [[ ${PRIVATE_ENCRYPTED_DIR:-} ]] || die_no_var PRIVATE_ENCRYPTED_DIR
  [[ ${PRIVATE_DECRYPTED_DIR:-} ]] || die_no_var PRIVATE_DECRYPTED_DIR

  case "$1" in
    s|status) status ;;
    m|mount) mount ;;
    u|umount|unmount) unmount ;;
    *) die_help "invalid action '$1'" ;;
  esac
}

status() {
  echo "PRIVATE_ENCRYPTED_DIR"
  echo "  path:   $PRIVATE_ENCRYPTED_DIR"
  echo -n "  status: "

  if [ -d "$PRIVATE_ENCRYPTED_DIR" ]; then
    echo "exists"
  elif [ -e "$PRIVATE_ENCRYPTED_DIR" ]; then
    echo "not a directory"
  else
    echo "not exists"
  fi

  echo
  echo "PRIVATE_DECRYPTED_DIR"
  echo "  path:  $PRIVATE_DECRYPTED_DIR"
  echo -n "  status: "

  if [ -d "$PRIVATE_ENCRYPTED_DIR" ]; then
    if is_mounted; then
      echo "mounted"
    else
      echo "unmounted"
    fi
  elif [ -e "$PRIVATE_ENCRYPTED_DIR" ]; then
    echo "not a directory"
  else
    echo "not exists"
  fi
}

is_mounted() {
  mountpoint --quiet "$PRIVATE_DECRYPTED_DIR"
}

mount() {
  is_mounted && die "'$PRIVATE_DECRYPTED_DIR' is already mounted"
  mkdir --parent "$PRIVATE_ENCRYPTED_DIR" "$PRIVATE_DECRYPTED_DIR"
  encfs "$PRIVATE_ENCRYPTED_DIR" "$PRIVATE_DECRYPTED_DIR"
}

unmount() {
  is_mounted || die "'$PRIVATE_DECRYPTED_DIR' is not mounted"
  fusermount -u --unmount "$PRIVATE_DECRYPTED_DIR"
}

main "$@"
