#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/path.sh"

help() {
  cat <<-EOT
		List or (un)mount encrypted directories. Simple encfs frontend.

		Usage:
		  $(self) [options] [<command>]

		Commands:
		  s, status   Print directories and mount status (default command).
		  m, mount    Mount private directory. Directories are created
		              and encryption is configured if they do not exist.
		  u, unmount  Unmout private directory.

		Options:
		  -e <dir>  Path to encrypted directory.
		  -d <dir>  Path to decrypted directory.
		  -h        Print this help.

		Environment vars:
		  ENCRYPTED_DIR  Default path to encrypted directory.
		  DECRYPTED_DIR  Default path to decrypted directory.
	EOT
}

main() {
  local enc_dir
  local dec_dir
  local opt

  enc_dir=$(path_from_env ENCRYPTED_DIR)
  dec_dir=$(path_from_env DECRYPTED_DIR)

  while getopts ":e:d:h" opt; do
    case "$opt" in
      e) enc_dir=$(path_make_absolute "$OPTARG") ;;
      d) dec_dir=$(path_make_absolute "$OPTARG") ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  case "${1-status}" in
    s|status) status ;;
    m|mount) mount ;;
    u|umount|unmount) unmount ;;
    *) die_help "invalid command '$1'" ;;
  esac
}

status() {
  if [[ $enc_dir ]]; then
    local enc_state

    if [ -d "$enc_dir" ]; then
      enc_state="exists"
    elif [ -e "$enc_dir" ]; then
      enc_state="is not a directory"
    else
      enc_state="does not exist"
    fi

    echo "Encrypted '$enc_dir' $enc_state."
  else
    echo "No encrypted directory specified."
  fi

  if [[ $dec_dir ]]; then
    local dec_state

    if [ -d "$dec_dir" ]; then
      if is_mounted; then
        dec_state=" is mounted"
      else
        dec_state="is not mounted"
      fi
    elif [ -e "$dec_dir" ]; then
      dec_state="is not a directory"
    else
      dec_state="does not exists"
    fi

    echo "Decrypted '$dec_dir' $dec_state."
  else
    echo "No decrypted directory specified."
  fi
}

mount() {
  [[ $enc_dir ]] || die_help "no encrypted directory specified"
  [[ $dec_dir ]] || die_help "no decrypted directory specified"
  is_mounted && die "'$dec_dir' is already mounted"

  mkdir --parent "$enc_dir" "$dec_dir"
  encfs "$enc_dir" "$dec_dir"
  echo "Mounted '$enc_dir' as '$dec_dir'"
}

unmount() {
  [[ $dec_dir ]] || die_help "no decrypted directory specified"
  is_mounted || die "'$dec_dir' is not mounted"

  fusermount -u --unmount "$dec_dir"
  echo "Unmounted '$dec_dir'"
}

is_mounted() {
  mountpoint --quiet "$dec_dir"
}

main "$@"
