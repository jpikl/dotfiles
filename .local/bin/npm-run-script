#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/args.sh"
source "$BASH_LIB_DIR/utils.sh"

help() {
  cat <<-EOT
		Run script of a npm package.

		Usage:
		  $(self) [options] [--] <script>...

		Options:
		  -r            Rerun script if it ends unexpectedly.
		  -d <seconds>  Rerun delay (default: $rerun_delay).
		  -h            Display this help.

		Script:
		  One or more script names.
		  First of these scripts that is defined in package.json will be run.
	EOT
}

set_rerun_delay() {
  # shellcheck disable=SC2015
  is_integer "$1" && [[ $1 -ge 0 ]] || die "invalid rerun delay '$1'"
  rerun_delay=$1
}

init() {
  local opt

  while getopts ":rd:h" opt; do
    case "$opt" in
      r) rerun_on_failure=true; ;;
      d) set_rerun_delay "$OPTARG" ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ $# -ge 1 ]]; then
    scripts=("$@")
  else
    die_missing_arg
  fi
}

run() {
  [[ -f package.json ]] || die "no package.json in the current directory"

  local available_scripts
  local target_script

  mapfile -t available_scripts < <(npm-list-scripts)

  for script in "${scripts[@]}"; do
    if is_one_of "$script" "${available_scripts[@]}"; then
      target_script=$script
      break;
    fi
  done

  if [[ -z $target_script ]]; then
    die "package.json has none of [$(join_values ", " "${scripts[@]}")] scripts"
  fi

  while ! npm run "$target_script"; do
    [[ $rerun_on_failure = true ]] || break
    printf "\npackage.json %s script unexpectedly crashed!\n" "$target_script" >&2
    interactive-sleep "$rerun_delay" "Script will automatically rerun" || true
  done
}

function main() {
  local rerun_on_failure
  local rerun_delay=30
  local scripts

  init "$@"
  run
}

main "$@"
