#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Git super status.

		Usage:
		  $(self) [options]

		Options:
		  -a  Print all information.
		  -h  Print this help.
	EOT
}

main() {
  local opt
  local all=false

  while getopts ":ah" opt; do
    case "$opt" in
      a) all=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  # Check we are in a git repository.
  git status --porcelain >/dev/null

  local -A icons=()

  if [[ $TERM == linux ]]; then
    icons[l]=""   # Branch
    icons[r]=""   # Remote
    icons[a]=""   # Ahead
    icons[b]=""   # Behind
    icons[s]=""   # Stash
    icons[w]=" W" # Work tree
    icons[i]=" I" # Index
    icons[A]=""   # Added
    icons[C]=""   # Copied
    icons[D]=""   # Deleted
    icons[M]=""   # Modified
    icons[R]=""   # Renamed
    icons[T]=""   # Retyped
    icons[U]=""   # Unmerged
    icons[X]=""   # Unknown
    icons[B]=""   # Broken
    icons[u]=""   # Untracked
    icons[_]=""   # Padding
  else
    icons[l]="  " # Branch
    icons[r]=" 歷"  # Remote
    icons[a]="  " # Ahead
    icons[b]="  " # Behind
    icons[s]="  " # Stash
    icons[w]=" פּ"  # Work tree
    icons[i]=" "  # Index
    icons[A]="  " # Added
    icons[C]="  " # Copied
    icons[D]="  " # Deleted
    icons[M]="  " # Modified
    icons[R]="  " # Renamed
    icons[T]="  " # Retyped
    icons[U]="  " # Unmerged
    icons[X]=" ? " # Unknown
    icons[B]="  " # Broken
    icons[u]="  " # Untracked
    icons[_]="   " # Padding
  fi

  local current_branch
  local remote_branch
  local commits_ahead
  local commits_behind
  local stash_size

  current_branch=$(print_current_branch)
  remote_branch=$(print_remote_branch)
  commits_ahead=$(print_commits_ahead)
  commits_behind=$(print_commits_behind)
  stash_size=$(print_stash_size)

  {
    printf "Branch!l:;%s\n" "$current_branch"
    printf "Remote!r:;%s\n" "$remote_branch"

    if [[ $commits_ahead -gt 0 || $all == true ]]; then
      printf "Ahead!a:;%d\n" "$commits_ahead"
    fi

    if [[ $commits_behind -gt 0 || $all == true ]]; then
      printf "Behind!b:;%d\n"  "$commits_behind"
    fi

    if [[ $stash_size -gt 0 || $all == true ]]; then
      printf "Stash!s:;%d\n"  "$stash_size"
    fi
  } | format_table --table-right=1 \
    | replace_icon_placeholders

  local change_type
  local change_types=(A C D M R T U X B)

  local -A change_names=(
    [A]="Addded"
    [C]="Copied"
    [D]="Deleted"
    [M]="Modified"
    [R]="Renamed"
    [T]="Retyped"
    [U]="Unmerged"
    [X]="Unknown"
    [B]="Broken"
  )

  local wtree_count
  local index_count

  local is_index_change=false
  local is_wtree_change=false

  local -A wtree_changes_count=()
  local -A index_changes_count=()

  local untracked_files_count

  for change_type in "${change_types[@]}"; do
    wtree_count=$(print_changed_files_count "$change_type")
    index_count=$(print_changed_files_count "$change_type" --staged)

    wtree_changes_count[$change_type]=$wtree_count
    index_changes_count[$change_type]=$index_count

    [[ $wtree_count -gt 0 ]] && is_wtree_change=true
    [[ $index_count -gt 0 ]] && is_index_change=true
  done

  untracked_files_count=$(print_untracked_files_count)

  if [[ $all == true
     || $is_index_change == true
     || $is_wtree_change == true
     || $untracked_files_count -gt 0 ]]; then

    echo
    {
      printf "CHANGE!_ ;!w;!i\n"

      for change_type in "${change_types[@]}"; do
        wtree_count=${wtree_changes_count[$change_type]}
        index_count=${index_changes_count[$change_type]}

        if [[ $wtree_count -gt 0 || $index_count -gt 0 || $all == true ]]; then
          printf "%s!%s:;%s;%d\n" "${change_names[$change_type]}" \
                                  "$change_type" \
                                  "$wtree_count" \
                                  "$index_count"
        fi
      done

      if [[ $untracked_files_count -gt 0 || $all == true ]]; then
        printf "Untracked!u:;%d;-\n" "$untracked_files_count"
      fi
    } | format_table --table-right=1,2,3 \
      | replace_icon_placeholders
  fi

  if [[ $is_wtree_change == true ]]; then
    echo
    echo "Work tree changes:"

    for change_type in "${change_types[@]}"; do
      if [[ ${wtree_changes_count[$change_type]} -gt 0 ]]; then
        print_changed_files "$change_type" | sort | prepend_icon "$change_type"
      fi
    done
  fi

  if [[ $is_index_change == true ]]; then
    echo
    echo "Staged changes:"

    for change_type in "${change_types[@]}"; do
      if [[ ${index_changes_count[$change_type]} -gt 0 ]]; then
        print_changed_files "$change_type" --staged | sort | prepend_icon "$change_type"
      fi
    done
  fi

  if [[ $untracked_files_count -gt 0 ]]; then
    echo
    echo "Untracked files:"
    print_untracked_files | sort | prepend_icon "u"
  fi
}

print_current_branch() {
  git rev-parse --abbrev-ref HEAD
}

print_remote_branch() {
  git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}'
}

print_commits_ahead() {
  git rev-list --count --left-only 'HEAD...@{upstream}'
}

print_commits_behind() {
  git rev-list --count --right-only 'HEAD...@{upstream}'
}

print_stash_size() {
  git stash list | wc --lines
}

print_changed_files() {
  git diff --name-only --diff-filter "$@"
}

print_changed_files_count() {
  print_changed_files "$@" | wc --lines
}

print_untracked_files() {
  git ls-files --other --exclude-standard
}

print_untracked_files_count() {
  print_untracked_files | wc --lines
}

format_table() {
  column --table --separator=";" --output-separator=" " "$@"
}

replace_icon_placeholders() {
  # Some /usr/bin/column implementations (e.g. MSYS) are broken and cannot
  # properly handle unicode characters. We are therefore using "!x" style
  # ASCII placeholders in colum's input and replace them with icons
  # in column's output.
  local opts=()
  for name in "${!icons[@]}"; do
    opts+=("--expression" "s/!$name/${icons[$name]:-}/")
  done
  sed "${opts[@]}"
}

prepend_icon() {
  sed "s/^/${icons[$1]:-"- "}/"
}

main "$@"
