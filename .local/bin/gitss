#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Git super status.

		Usage:
		  $(self) [options]

		Options:
		  -a  Print all information.
		  -h  Print this help.

		Environment variables:
		  TERM_FONT_ICONS  When true, display font icons in terminal.
	EOT
}

main() {
  local opt
  local all=false

  while getopts ":ah" opt; do
    case "$opt" in
      a) all=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  # Check we are in a git repository.
  git status --porcelain >/dev/null

  generate_output | colorize_output
}

generate_output() {
  local current_branch
  local remote_branch
  local commits_ahead
  local commits_behind
  local stash_size

  current_branch=$(print_current_branch)
  remote_branch=$(print_remote_branch)
  commits_ahead=$(print_commits_ahead)
  commits_behind=$(print_commits_behind)
  stash_size=$(print_stash_size)

  {
    printf "#bBranch#r@l:;%s\n" "$current_branch"
    printf "#bRemote#r@r:;%s\n" "$remote_branch"

    if [[ $commits_ahead -gt 0 || $all == true ]]; then
      printf "#bAhead#r@a:;%d\n" "$commits_ahead"
    fi

    if [[ $commits_behind -gt 0 || $all == true ]]; then
      printf "#bBehind#r@b:;%d\n" "$commits_behind"
    fi

    if [[ $stash_size -gt 0 || $all == true ]]; then
      printf "#bStash#r@s:;%d\n" "$stash_size"
    fi
  } | format_table --table-right=1

  local change_type
  local change_types=(A C D M R T U X B)

  local -A change_names=(
    [A]="Addded"
    [C]="Copied"
    [D]="Deleted"
    [M]="Modified"
    [R]="Renamed"
    [T]="Retyped"
    [U]="Unmerged"
    [X]="Unknown"
    [B]="Broken"
  )

  local wtree_count
  local index_count

  local is_index_change=false
  local is_wtree_change=false

  local -A wtree_changes_count=()
  local -A index_changes_count=()

  local untracked_files_count

  for change_type in "${change_types[@]}"; do
    wtree_count=$(print_changed_files_count "$change_type")
    index_count=$(print_changed_files_count "$change_type" --staged)

    wtree_changes_count[$change_type]=$wtree_count
    index_changes_count[$change_type]=$index_count

    [[ $wtree_count -gt 0 ]] && is_wtree_change=true
    [[ $index_count -gt 0 ]] && is_index_change=true
  done

  untracked_files_count=$(print_untracked_files_count)

  if [[ $all == true
     || $is_index_change == true
     || $is_wtree_change == true
     || $untracked_files_count -gt 0 ]]; then

    echo
    {
      printf "#bCHANGE;@t#r;@w;@i\n"

      for change_type in "${change_types[@]}"; do
        wtree_count=${wtree_changes_count[$change_type]}
        index_count=${index_changes_count[$change_type]}

        if [[ $wtree_count -gt 0 || $index_count -gt 0 || $all == true ]]; then
          printf "#%s%s;@%s#r;%d;%d\n" "$change_type" \
                                       "${change_names[$change_type]}" \
                                       "$change_type" \
                                       "$wtree_count" \
                                       "$index_count"
        fi
      done

      if [[ $untracked_files_count -gt 0 || $all == true ]]; then
        printf "#uUntracked;@u#r;%d;\n" "$untracked_files_count"
      fi
    } | format_table --table-right=1,3,4
  fi

  if [[ $is_wtree_change == true ]]; then
    printf "\n#bChanges in work tree#r:\n"

    for change_type in "${change_types[@]}"; do
      if [[ ${wtree_changes_count[$change_type]} -gt 0 ]]; then
        print_changed_files "$change_type" | sort | format_path "$change_type"
      fi
    done
  fi

  if [[ $is_index_change == true ]]; then
    printf "\n#bChanges in index#r:\n"

    for change_type in "${change_types[@]}"; do
      if [[ ${index_changes_count[$change_type]} -gt 0 ]]; then
        print_changed_files "$change_type" --staged | sort | format_path "$change_type"
      fi
    done
  fi

  if [[ $untracked_files_count -gt 0 ]]; then
    printf "\n#bUntracked files#r:\n"
    print_untracked_files | sort | format_path "u"
  fi
}

print_current_branch() {
  git rev-parse --abbrev-ref HEAD
}

print_remote_branch() {
  git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}'
}

print_commits_ahead() {
  git rev-list --count --left-only 'HEAD...@{upstream}'
}

print_commits_behind() {
  git rev-list --count --right-only 'HEAD...@{upstream}'
}

print_stash_size() {
  git stash list | wc --lines
}

print_changed_files() {
  git diff --name-only --diff-filter "$@"
}

print_changed_files_count() {
  print_changed_files "$@" | wc --lines
}

print_untracked_files() {
  git ls-files --other --exclude-standard
}

print_untracked_files_count() {
  print_untracked_files | wc --lines
}

format_table() {
  column --table --separator=";" --output-separator=" " "$@"
}

format_path() {
  sed --regexp-extended "s/^(.*)$/#$1 @$1 \1#r/"
}

colorize_output() {
  local -A formats=()
  local -A icons=()

  if [[ -t 1 ]]; then
    formats[r]=$(tput sgr0)      # Reset
    formats[b]=$(tput bold)      # Bold
    formats[A]="$(tput setaf 2)" # Added
    formats[C]="$(tput setaf 6)" # Copied
    formats[D]="$(tput setaf 1)" # Deleted
    formats[M]="$(tput setaf 4)" # Modified
    formats[R]="$(tput setaf 6)" # Renamed
    formats[T]="$(tput setaf 6)" # Retyped
    formats[U]="$(tput setaf 3)" # Unmerged
    formats[X]="$(tput setaf 5)" # Unknown
    formats[B]="$(tput setaf 5)" # Broken
    formats[u]="$(tput setaf 8)" # Untracked
  else
    formats[r]= # Reset
    formats[b]= # Bold
    formats[A]= # Added
    formats[C]= # Copied
    formats[D]= # Deleted
    formats[M]= # Modified
    formats[R]= # Renamed
    formats[T]= # Retyped
    formats[U]= # Unmerged
    formats[X]= # Unknown
    formats[B]= # Broken
    formats[u]= # Untracked
  fi

  if [[ -t 1 &&  ${TERM_FONT_ICONS:-} == true ]]; then
    icons[l]="  " # Branch
    icons[r]=" 歷"  # Remote
    icons[a]="  " # Ahead
    icons[b]="  " # Behind
    icons[s]="  " # Stash
    icons[w]=" פּ"  # Work tree
    icons[i]=" "  # Index
    icons[t]="" # Change type
    icons[A]="" # Added
    icons[C]="" # Copied
    icons[D]="" # Deleted
    icons[M]="" # Modified
    icons[R]="" # Renamed
    icons[T]="" # Retyped
    icons[U]="" # Unmerged
    icons[X]="?" # Unknown
    icons[B]="" # Broken
    icons[u]="" # Untracked
  else
    icons[l]=     # Branch
    icons[r]=     # Remote
    icons[a]=     # Ahead
    icons[b]=     # Behind
    icons[s]=     # Stash
    icons[w]=" W" # Work tree
    icons[i]=" I" # Index
    icons[t]="T"  # Change type
    icons[A]="A"  # Added
    icons[C]="C"  # Copied
    icons[D]="D"  # Deleted
    icons[M]="M"  # Modified
    icons[R]="R"  # Renamed
    icons[T]="T"  # Retyped
    icons[U]="U"  # Unmerged
    icons[X]="X"  # Unknown
    icons[B]="B"  # Broken
    icons[u]=" "  # Untracked
  fi

  local sed_opts=()
  local name

  for name in "${!formats[@]}"; do
    sed_opts+=("--expression" "s/#$name/${formats[$name]}/")
  done

  for name in "${!icons[@]}"; do
    sed_opts+=("--expression" "s/@$name/${icons[$name]}/")
  done

  sed "${sed_opts[@]}"
}

main "$@"
