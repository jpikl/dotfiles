#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Git super status.

		Usage:
		  $(self) [options]

		Options:
		  -a  Print all information.
		  -h  Print this help.
	EOT
}

main() {
  local opt
  local all=false

  while getopts ":ah" opt; do
    case "$opt" in
      a) all=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  # Check we are in a git repository.
  git status --porcelain >/dev/null

  declare -A icons=()

  if [[ $TERM == linux ]]; then
    icons[0]=""   # Branch
    icons[1]=""   # Remote
    icons[2]=""   # Ahead
    icons[3]=""   # Behind
    icons[4]=""   # Stash
    icons[a]=" W" # Work tree
    icons[b]=" I" # Index
    icons[c]=""   # Added
    icons[d]=""   # Copied
    icons[e]=""   # Deleted
    icons[f]=""   # Modified
    icons[g]=""   # Renamed
    icons[h]=""   # Retyped
    icons[i]=""   # Unmerged
    icons[j]=""   # Unknown
    icons[k]=""   # Broken
    icons[l]=""   # Untracked
    icons[_]=""   # Padding
  else
    icons[0]="  " # Branch
    icons[1]=" 歷"  # Remote
    icons[2]="  " # Ahead
    icons[3]="  " # Behind
    icons[4]="  " # Stash
    icons[a]=" פּ"  # Work tree
    icons[b]=" "  # Index
    icons[c]="  " # Added
    icons[d]="  " # Copied
    icons[e]="  " # Deleted
    icons[f]="  " # Modified
    icons[g]="  " # Renamed
    icons[h]="  " # Retyped
    icons[i]="  " # Unmerged
    icons[j]=" ? " # Unknown
    icons[k]="  " # Broken
    icons[l]="  " # Untracked
    icons[_]="   " # Padding
  fi

  print_summary_table | format_table --table-right=1 | replace_icon_placeholders

  if [[ $all == true || "$(git status --porcelain)" ]]; then
    echo
    print_changes_table | format_table --table-right=1,2,3 | replace_icon_placeholders
  fi
}

print_summary_table() {
  print_current_branch
  print_remote_branch
  print_commits_ahead
  print_commits_behind
  print_stash_size
}

print_current_branch() {
  printf "Branch!0:;"
  git rev-parse --abbrev-ref HEAD 2>/dev/null
}

print_remote_branch() {
  printf "Remote!1:;"
  git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}' 2>/dev/null
}

print_commits_ahead() {
  local count
  count=$(git rev-list --count --left-only 'HEAD...@{upstream}' 2>/dev/null)
  if [[ $count -gt 0 || $all == true ]]; then
    printf "Ahead!2:;%s\n" "$count"
  fi
}

print_commits_behind() {
  local count
  count=$(git rev-list --count --right-only 'HEAD...@{upstream}' 2>/dev/null)
  if [[ $count -gt 0 || $all == true ]]; then
    printf "Behind!3:;%s\n" "$count"
  fi
}

print_stash_size() {
  local size
  size=$(git stash list 2>/dev/null | wc --lines)
  if [[ $size -gt 0 || $all == true ]]; then
    printf "Stash!4:;%s\n" "$size"
  fi
}

print_changes_table() {
  printf "!_[Work/Index];!a;!b\n"
  print_changed_files "A" "Addded!c"
  print_changed_files "C" "Copied!d"
  print_changed_files "D" "Deleted!e"
  print_changed_files "M" "Modified!f"
  print_changed_files "R" "Renamed!g"
  print_changed_files "T" "Retyped!h"
  print_changed_files "U" "Unmerged!i"
  print_changed_files "X" "Unknown!j"
  print_changed_files "B" "Broken!k"
  print_untracked_files
}

print_changed_files() {
  local wtree_count
  local index_count

  wtree_count=$(git diff --name-only --diff-filter="$1" 2>/dev/null | wc --lines)
  index_count=$(git diff --name-only --diff-filter="$1" --staged 2>/dev/null | wc --lines)

  if [[ $wtree_count -gt 0 || $index_count -gt 0 || $all == true ]]; then
    [[ $wtree_count -eq 0 && $all == false ]] && wtree_count=
    [[ $index_count -eq 0 && $all == false ]] && index_count=
    printf "%s:;%s;%s\n" "$2" "$wtree_count" "$index_count"
  fi
}

print_untracked_files() {
  local count
  count="$(git ls-files --other --exclude-standard  2>/dev/null | wc --lines)"
  if [[ $count -gt 0 || $all == true ]]; then
    printf "Untracked!l:;%d\n" "$count"
  fi
}

format_table() {
  column --table --separator=";" --output-separator=" " "$@"
}

replace_icon_placeholders() {
  # Some /usr/bin/column implementations (e.g. MSYS) are broken and cannot
  # properly handle unicode characters. We are therefore using "!x" style
  # ASCII placeholders in colum's input and replace them with icons
  # in column's output.
  local opts=()
  for name in "${!icons[@]}"; do
    opts+=("--expression" "s/!$name/${icons[$name]:-}/g")
  done
  sed "${opts[@]}"
}

main "$@"
