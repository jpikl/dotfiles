#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

readonly SC_EXCLUDE=SC1090 # Can't follow non-constant source.

help() {
  cat <<-EOT
		Manage Bash files from dotfiles repository.

		Usage:
		  $(self) [<options>] [<command>]

		Commands:
		  l, list      List commited Bash files.
		  c, check     Run shellcheck on Bash files.
		  d, describe  Print name and description of binaries and aliases.
		  m, markdown  Same as 'describe' but with Markdown output.

		Options:
		  -a  Include uncommitted files.
		  -h  Print this help.

		Default command is 'list'.
	EOT
}

main() {
  local opt
  local all=false

  while getopts ":ah" opt; do
    case "$opt" in
      a) all=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  case "${1-list}" in
    l|list)     list_files ;;
    c|check)    check_files ;;
    d|describe) describe_files ;;
    m|markdown) markdown_files ;;
    *)          help ;;
  esac
}

list_files() {
  local files=(
    ~/.bash_logout
    ~/.bash_profile
    ~/.bashrc
    ~/.bashrc.d/*.sh
    ~/.profile
    ~/.profile.d/*.sh
    ~/.local/bin/*
    ~/.local/lib/bash/*.sh
  )
  printf "%s\n" "${files[@]}" | filter_files
}

list_bin_files() {
  printf "%s\n" ~/.local/bin/* | filter_files
}

list_bashrc_files() {
  printf "%s\n" ~/.bashrc.d/*.sh | filter_files
}

list_commited_files() {
  cd "$HOME"
  git --git-dir="$HOME/.dotfiles.git" \
      --work-tree="$HOME" \
      ls-files \
      --full-name \
    | sed "s,^,$HOME/,"
}

filter_files() {
  if [[ $all = true ]]; then
    cat
  else
    filter_commited_files
  fi
}

filter_commited_files() {
  grep --fixed-strings \
       --line-regexp \
       --file=<(list_commited_files)
}

filter_aliases_with_comments() {
  grep --after-context=1 --no-group-separator "$@" '^\s*##\s'
}

has_aliases_with_comments() {
  filter_aliases_with_comments --max-count=1 <"$1" &>/dev/null
}

check_files() {
  list_files | xargs shellcheck --exclude=$SC_EXCLUDE "${files[@]}"
  echo "Bash files are valid."
}

describe_files() {
  list_bin_files | describe_binaries
  list_bashrc_files | describe_aliases
}

describe_binaries() {
  echo ~/.local/bin/
  local file
  while read -r file; do
    echo "  ${file##*/}|$(format_binary "$file")"
  done | format_table
}

describe_aliases() {
  local file
  while read -r file; do
    if has_aliases_with_comments "$file"; then
      echo
      echo "$file"
      filter_aliases_with_comments <"$file" \
        | format_aliases "  \3|\1" \
        | format_table
    fi
  done
}

markdown_files() {
  echo "# List of available commands"
  echo
  echo "This page was generated by \`bashfiles markdown > ~/.github/commands.md\`"
  echo
  echo "## [Binaries](../.local/bin/)"
  echo
  list_bin_files | markdown_binaries
  echo
  echo "## [Aliases](../.bashrc.d/)"
  list_bashrc_files | markdown_aliases
}

markdown_binaries() {
  local file
  while read -r file; do
    local name=${file##*/}
    echo "- [$name](../.local/bin/$name) - $(format_binary "$file")"
  done
}

markdown_aliases() {
  local file
  while read -r file; do
    if has_aliases_with_comments "$file"; then
      local name=${file##*/}
      echo
      echo "### [$name](../.bashrc.d/$name)"
      echo
      filter_aliases_with_comments <"$file" \
        | format_aliases "- \`\3\` - \1" \
        | format_table
    fi
  done
}

format_binary() {
  "$1" -h | head --lines=1
}

format_aliases() {
  sed --regexp-extended "N;s/^\s*##\s+(.*)\n\s*(alias\s+)?([^=(]+).*\$/$1/"
}

format_table() {
  column --table --separator='|'
}

main "$@"
