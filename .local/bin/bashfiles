#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

readonly SC_EXCLUDE=SC1090 # Can't follow non-constant source.

help() {
  cat <<-EOT
		Manage Bash files from dotfiles repository.

		Usage:
		  $(self) [<options>] [<command>]

		Commands:
		  l, list      List Bash files.
		  c, check     Run shellcheck on Bash files.
		  d, describe  Print name and description of executable Bash files.
		  m, markdown  Same as 'describe' but with Markdown output.

		Options:
		  -h  Print this help.

		Default command is 'list'.
	EOT
}

main() {
  local opt

  while getopts ":h" opt; do
    case "$opt" in
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  case "${1-list}" in
    l|list)     list_files ;;
    d|describe) describe_files ;;
    m|markdown) markdown_files ;; # Undocumented
    c|check)    check_files ;;
    *)          help ;;
  esac
}

list_files() {
  local files=(
    ~/.bash_logout
    ~/.bash_profile
    ~/.bashrc
    ~/.bashrc.d/*.sh
    ~/.profile
    ~/.profile.d/*.sh
    ~/.local/bin/*
    ~/.local/lib/bash/*.sh
  )
  printf "%s\n" "${files[@]}" | filter_git_files | LC_ALL=C sort
}

list_bin_files() {
  printf "%s\n" ~/.local/bin/* | filter_git_files | LC_ALL=C sort
}

list_git_files() {
  cd "$HOME"
  git --git-dir="$HOME/.dotfiles.git" \
      --work-tree="$HOME" \
      ls-files \
      --full-name \
    | sed "s,^,$HOME/,"
}

filter_git_files() {
  grep --fixed-strings \
       --line-regexp \
       --file=<(list_git_files)
}

describe_files() {
  local file
  while read -r file; do
    echo "${file##*/}|$(describe_file "$file")"
  done < <(list_bin_files) | column --table --separator='|'
}

markdown_files() {
  local file
  while read -r file; do
    local name=${file##*/}
    echo "- [$name](../.local/bin/$name) - $(describe_file "$file")"
  done < <(list_bin_files)
}

describe_file() {
  "$1" -h | head --lines=1
}

check_files() {
  list_files | xargs shellcheck --exclude=$SC_EXCLUDE "${files[@]}"
  echo "Bash files are valid."
}

main "$@"
