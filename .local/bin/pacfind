#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/utils.sh"

help() {
  cat <<-EOT
		Find pacman packages.

		Usage:
		  $(self) [options] [--] [name]

		Options:
		  -i  Include installed packages.
		  -r  Include pacakges from repositories.
		  -a  Include packages from AUR.
		  -q  Print package names only.
		  -h  Display this help.

		Name:
		  Package name to find.
		  If not specified, all packages are printed.
	EOT
}

main() {
  local installed=false
  local repos=false
  local aur=false
  local quiet=false
  local opt

  while getopts ":iraqch" opt; do
    case "$opt" in
      i) installed=true ;;
      r) repos=true ;;
      a) aur=true ;;
      q) quiet=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ $quiet == true ]]; then
    print | filter "${1:-}" | LC_ALL=C sort | LC_ALL=C uniq
  else
    print | filter "${1:-}"
  fi
}

print() {
  [[ $installed == true ]] && print_installed
  [[ $repos == true ]] && print_repos
  [[ $aur == true ]] && print_aur
  [[ $quiet == false ]] && tput sgr0
  true
}

print_installed() {
  if [[ $quiet == true ]]; then
    pacman --query --quiet
  else
    local prefix
    prefix="$(tput bold)$(tput setaf 5)installed "
    pacman --query --color=always | sed --expression="s/^/$prefix/"
  fi
}

print_repos() {
  local opts=("--sync" "--list")
  if [[ $quiet == true ]]; then
    opts+=("--quiet")
  else
    opts+=("--color=always")
  fi
  pacman "${opts[@]}"
}

print_aur() {
  if [[ $quiet == true ]]; then
    print_aur_quiet
  else
    local prefix
    prefix="$(tput bold)$(tput setaf 5)aur $(tput sgr0)$(tput bold)"
    print_aur_quiet | sed --expression="s/^/$prefix/"
  fi
}

print_aur_quiet() {
  curl --silent https://aur.archlinux.org/packages.gz \
    | gunzip \
    | tail --lines=+2 \
    | LC_ALL=C sort
}

filter() {
  if [[ $1 ]]; then
    local opts=("--extended-regexp" "--color=never")
    if [[ $quiet == true ]]; then
      opts=("$1")
    else
      opts=("^.* .*$1") # We need to exclude prefix
    fi
    grep "${opts[@]}"
  else
    cat
  fi
}

main "$@"
