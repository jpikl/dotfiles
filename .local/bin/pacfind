#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/term.sh"

help() {
  cat <<-EOT
		Find ArchLinux packages. Simple pacman frontend wit AUR support.

		Usage:
		  $(self) [<options>] [<name>]

		Args:
		  <name> Package name to find.

		Options:
		  -l  Include local packages.
		  -g  Include local packages that are gone on remote.
		  -r  Include remote pacakges from repositories.
		  -a  Include remote packages from AUR.
		  -q  Print package names only.
		  -c  Force colors in output (-C for no colors).
		  -h  Print this help.

		Remote packages are searched by default unless one of -lgra is passed.
		Packages are listed without search when no package name is passed.
	EOT
}

main() {
  local local=false
  local gone=false
  local repo=false
  local aur=false
  local quiet=false
  local colors=
  local opt

  while getopts ":lgraqcCh" opt; do
    case "$opt" in
      l) local=true ;;
      g) gone=true ;;
      r) repo=true ;;
      a) aur=true ;;
      q) quiet=true ;;
      c) colors=true ;;
      C) colors=false ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ $local == false && $gone == false && $repo == false && $aur == false ]]; then
    repo=true
    aur=true
  fi

  if [[ ! $colors ]] ; then
    if term_has_colors; then
      colors=true
    else
      colors=false
    fi
  fi

  local pacman_color

  if [[ $colors == true ]]; then
    pacman_color="--color=always"
  else
    pacman_color="--color=never"
  fi

  if [[ $quiet == true ]]; then
    print_names | filter_names "${1-}" | LC_ALL=C sort --unique
  else
    print_packages | filter_packages "${1-}"
  fi
}

print_packages() {
  [[ $local == true ]] && print_local_packages
  [[ $gone == true ]] && print_gone_packages
  [[ $repo == true ]] && print_repo_packages
  [[ $aur == true ]] && print_aur_packages
  [[ -t 1 ]] && tput sgr0 # Reset changed color
  true
}

print_names() {
  [[ $local == true ]] && print_local_names
  [[ $gone == true ]] && print_gone_names
  [[ $repo == true ]] && print_repo_names
  [[ $aur == true ]] && print_aur_names
  true
}

print_local_packages() {
  pacman --query "$pacman_color" | decorate_line "local"
}

print_local_names() {
  pacman --query --quiet
}

print_gone_packages() {
  print_gone_names | decorate_line "gone"
}

print_gone_names() {
  print_local_names | filter_gone_names
}

filter_gone_names() {
  grep --fixed-strings \
       --line-regexp \
       --invert-match \
       --file=<(print_remote_names)
}

print_remote_names() {
  {
    print_repo_names
    print_aur_names
  } | LC_ALL=C sort --unique
}

print_repo_packages() {
  pacman --sync --list "$pacman_color"
}

print_repo_names() {
  pacman --sync --list --quiet
}

print_aur_packages() {
  print_aur_names | decorate_line "aur"
}

print_aur_names() {
  curl --silent https://aur.archlinux.org/packages.gz \
    | gunzip \
    | tail --lines=+2 \
    | LC_ALL=C sort
}

filter_packages() {
  if [[ $1 ]]; then
    filter_names "^\S*\s+\S*$1" # To exclude prefix
  else
    cat
  fi
}

filter_names() {
  if [[ $1 ]]; then
    grep --extended-regexp --color=never "$1"
  else
    cat
  fi
}

decorate_line() {
  if [[ $colors == true ]]; then
    sed "s/^/$(tput bold)$(tput setaf 5)$1 $(tput sgr0)$(tput bold)/"
  else
    sed "s/^/$1 /"
  fi
}

main "$@"
