#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Find wrapper with extra capabilities.

		Usage:
		  $(self) [options] [path]... [expression]

		Options:
		  Options accepted by the find command.

		Path:
		  Zero or more starting points.
		  Default path is the current working directory.

		Expression:
		  Expression accepted by the find command.
		  Default expression is '-print'.
		  The following are new expressions provided by $(self).

		  -exclude flags
		           Exclude certain files and directories from search.
		           Such directories are always pruned from search using -prune.
		           Flags is a string of the following characters:

		           v  Exclude directories of various version control systems.
		           p  Exclude metadata of various editors and IDEs.
		           l  Exlude libraries and dependencies.
		           o  Exclude output of a compilation or a build process.
		           D  When excluding a directory, exclude only its contents
		              not the directory itself.

		See 'find -help' or 'man find' for more details.
	EOT
}

main() {
  # Check for help option
  local arg
  for arg; do
    [[ $arg =~ ^(-h|-?-help)$ ]] && help && exit
  done

  # Consume options
  local options=()
  while [[ $# -gt 0 && $1 =~ ^(-H|-L|-P|-O.*|-D)$ ]]; do
    options+=("$1")
    if [[ $1 == -D ]]; then
      if [[ $# -eq 1 ]]; then
        find "${options[@]}" # Missing argument => fail with correct error message
        die_help "-D option requires an argument" # Should not be needed
      fi
      options+=("$2")
      shift 2
    else
      shift
    fi
  done

  # Consume paths
  local paths=()
  while [[ $# -gt 0 && $1 != -* && $1 != "(" ]]; do
    paths+=("$1")
    shift
  done

  # Consume and expand expression
  local expression=()
  while [[ $# -gt 0 ]]; do
    if [[ $1 == "-exclude" ]]; then
      if [[ $# -lt 2 ]]; then
        die_help "-exclude requires an argument"
      elif [[ ! $2 ]]; then
        die_help "no flags passed to -exclude"
      elif [[ ! $2 =~ ^[vploD]+$ ]]; then
        die_help "invalid flags passed to -exclude"
      fi
      mapfile -tO "${#expression[@]}" expression < <(expand_exclude "$2")
      shift 2
    else
      expression+=("$1")
      shift
    fi
  done

  # Pass everything to find
  find "${options[@]}" "${paths[@]}" "${expression[@]}"
}

expand_exclude() {
  local dirs=()
  local files=()

  if [[ $1 == *v* ]]; then
    dirs+=(
      ".git" # Git
      ".hg"  # Mercurial
      ".bzr" # Bazaar
      ".svn" # Subversion
    )
  fi

  if [[ $1 == *p* ]]; then
    dirs+=(
      ".idea"     # Intellij IDEA
      ".metadata" # Eclipse
      ".vscode"   # Visual Studio Code
    )
    files+=(
      "*.iml" # Intellij IDEA
    )
  fi

  if [[ $1 == *l* ]]; then
    dirs+=(
      "node_modules" # Node.js
      "!dependsrc"   # Delphi
    )
  fi

  if [[ $1 == *o* ]]; then
    dirs+=(
      "target"     # Maven
      ".happypack" # Happypack (webpack plugin)
    )
  fi

  local expression=("(")

  if [[ ${#dirs[@]} -gt 0 ]]; then
    if [[ $1 != *D* ]]; then
      expression+=("-not")
    fi
    expression+=("(" "-type" "d" "(")
    for (( i = 0; i < ${#dirs[@]}; i++ )); do
      [[ $i -gt 0 ]] && expression+=("-or")
      expression+=("-name" "${dirs[$i]}")
    done
    expression+=(")" "-prune")
    if [[ $1 == *D* ]]; then
      expression+=("-or" "-true")
    fi
    expression+=(")")
  fi

  if [[ ${#files[@]} -gt 0 ]]; then
    expression+=("-not" "(" "-type" "f" "(")
    for (( i = 0; i < ${#files[@]}; i++ )); do
      [[ $i -gt 0 ]] && expression+=("-or")
      expression+=("-name" "${files[$i]}")
    done
    expression+=(")" ")")
  fi

  expression+=(")")

  printf "%s\n" "${expression[@]}"
}

main "$@"
