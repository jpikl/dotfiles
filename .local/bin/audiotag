#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

source ~/.local/lib/bash/core.sh
source ~/.local/lib/bash/path.sh

help() {
  cat <<-EOT
		Automatically fill ID3 tags of audio files from their filenames.

		Usage:
		  $(self) [<options>] <file>...

		Args:
		  <file>... Audio files to process.

		Options:
		  -c  Only check if tags have valid values (do not modify any files).
		      Exit with non-zero status on error.
		  -e  Continue after an error, fail at end.
		  -v  Verbose mode with additional output.
		  -h  Print this help.

		ID3 tags are filled from file and parent directory names.
		The following directory structure is expected:

		  <artist>/<year> - <album>/<number> - <title>.<extension>

		For example:

		  Iron Maiden/1984 - Powerslave/01 - Aces High.mp3
		  Iron Maiden/1984 - Powerslave/02 - 2 Minutes to Midnight.mp3
		  ...
	EOT
}

main() {
  local check=false
  local die_on_error=true
  local verbose=false
  local opt

  while getopts ":cevh" opt; do
    case "$opt" in
      c) check=true ;;
      e) die_on_error=false ;;
      v) verbose=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))
  [[ $# -gt 0 ]] || die_missing_arg

  local path
  local die_at_end=false

  for path; do
    if ! process_path "$path"; then
      [[ $die_on_error == true ]] && die || die_at_end=true
    fi
  done

  [[ $die_at_end == false ]]
}

process_path() {
  local path=$1
  local number_title_ext=${path##*/}
  local number_title=${number_title_ext%.*}
  local title=${number_title#* - }
  local number=${number_title%% - *}

  local parent_path=${path%/*}
  local year_album=${parent_path##*/}
  local year=${year_album:0:4}
  local album=${year_album:7}

  local grand_parent_path=${parent_path%/*}
  local artist=${grand_parent_path##*/}

  if [[ $check == true ]]; then
    check_tags
  else
    rewrite_tags
  fi
}

check_tags() {
  local tag_name
  local tag_value

  local artist_err=
  local year_err=
  local album_err=
  local number_err=
  local title_err=

  local unexpected_tags=()

  while read -r tag_name tag_value; do
    case "$tag_name" in
      TPE1)   [[ $tag_value != "$artist" ]] && artist_err=$tag_value ;;
      TYER)   [[ $tag_value != "$year"   ]] && year_err=$tag_value ;;
      TALB)   [[ $tag_value != "$album"  ]] && album_err=$tag_value ;;
      TRCK)   [[ $tag_value != "$number" ]] && number_err=$tag_value ;;
      TIT2)   [[ $tag_value != "$title"  ]] && title_err=$tag_value ;;
      *)      unexpected_tags+=("$tag_name") ;;
    esac
  done < <(read_tags "$path")

  if [[
    $artist_err ||
    $year_err   ||
    $album_err  ||
    $number_err ||
    $title_err  ||
    ${#unexpected_tags[@]} -gt 0
  ]]; then
    if [[ $verbose == true ]]; then
      echo
      echo "$path"
      [[ $artist_err ]] && echo " Artist (TPE1) is '$artist_err' but should be '$artist'"
      [[ $year_err ]]   && echo " Year (TYER) is '$year_err' but should be '$year'"
      [[ $album_err ]]  && echo " Album (TYER) is '$album_err' but should be '$album'"
      [[ $number_err ]] && echo " Track (TRCK) is '$number_err' but should be '$number'"
      [[ $title_err ]]  && echo " Title (TIT2) is '$title_err' but should be '$title'"
      [[ ${#unexpected_tags[@]} -gt 0 ]] && echo "  Unexpected tags: ${unexpected_tags[*]}"
    else
      echo "Invalid tag: $path"
    fi >&2
    return 1
  fi
}

rewrite_tags() {
  id3 --delete "$path"
  id3 -2 \
      --artist "$artist" \
      --year "$year" \
      --album "$album" \
      --track "$number" \
      --title "$title" \
      "$path"

  if [[ $verbose == true ]]; then
    echo
    echo "$path"
    echo "  Artist (TPE1): $artist"
    echo "  Year   (TYER): $year"
    echo "  Album  (TALB): $album"
    echo "  Track  (TRCK): $number"
    echo "  Title  (TIT2): $title"
  else
    echo "Updated tag: $path"
  fi
}

read_tags() {
  local line
  local name=
  local value=

  while IFS=$'\t' read -r line; do
    if [[ $line =~ ^\{[a-zA-Z0-9]+\}$ ]]; then
      name=${line:1:-1}
    elif [[ $line != '#'* ]]; then
      value=$line
    fi

    if [[ $name && $value ]]; then
      echo "$name $value"
      name=
      value=
    fi
  done < <(id3 -v "$path")
}

main "$@"
