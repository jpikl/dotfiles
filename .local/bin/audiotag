#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

source ~/.local/lib/bash/core.sh
source ~/.local/lib/bash/format.sh
source ~/.local/lib/bash/path.sh

help() {
  cat <<-EOT
		Automatically fill ID3 tags of audio files from their filenames.

		Usage:
		  $(self) [<options>] <file>...

		Args:
		  <file>... Audio files to process.

		Options:
		  -c  Only check if tags have valid values (do not modify any files).
		      Exit with non-zero status on error.
		  -e  Continue after an error, fail at end.
		  -Y  Do not use album years.
		  -A  Use single track album without parent directory.
		  -v  Verbose mode with additional output.
		  -h  Print this help.

		ID3 tags are filled from file and parent directory names.
		The following directory structure is expected:

		  <artist>/<year> - <album>/<number> - <title>.<extension>

		For example:

		  Iron Maiden/1984 - Powerslave/01 - Aces High.mp3

		  Iron Maiden/1984 - Powerslave/02 - 2 Minutes to Midnight.mp3
		  ...

		When -Y option is used, the album <year> is ommited:

		  <artist>/<album>/<number> - <title>.<extension>

		When -A option is used, album is a single track without directory:

		  <artist>/<year> - <album>.<extension>
	EOT
}

main() {
  local check=false
  local years_enabled=true
  local album_dirs_enabled=true
  local die_on_error=true
  local verbose=false
  local opt

  while getopts ":ceYAvh" opt; do
    case "$opt" in
      c) check=true ;;
      e) die_on_error=false ;;
      Y) years_enabled=false ;;
      A) album_dirs_enabled=false ;;
      v) verbose=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))
  [[ $# -gt 0 ]] || die_missing_arg

  local path
  local die_at_end=false

  for path; do
    if ! process_path "$path"; then
      [[ $die_on_error == true ]] && die || die_at_end=true
    fi
  done

  [[ $die_at_end == false ]]
}

process_path() {
  local path=$1
  local parent_path=${path%/*}

  if [[ $album_dirs_enabled == true ]]; then
    local grand_parent_path=${parent_path%/*}

    local number_title_ext=${path##*/}
    local number_title=${number_title_ext%.*}
    local number=${number_title%% - *}
    local title=${number_title#* - }

    local year_album=${parent_path##*/}
    local artist=${grand_parent_path##*/}
  else
    local year_album_ext=${path##*/}
    local year_album=${year_album_ext%.*}
    local artist=${parent_path##*/}
  fi

  if [[ $years_enabled == true ]]; then
    local year=${year_album:0:4}
    local album=${year_album:7}
  else
    local album=$year_album
  fi

  if [[ $album_dirs_enabled == false ]]; then
    local title=$album
  fi

  if [[ $path == *.m4a ]]; then
    local artist_tag=artist
    local year_tag=year
    local album_tag=album
    local number_tag=track
    local title_tag=title
  else
    local artist_tag=TPE1
    local year_tag=TYER
    local album_tag=TALB
    local number_tag=TRCK
    local title_tag=TIT2
  fi

  if [[ $check == true ]]; then
    check_tags
  else
    update_tags
  fi
}

check_tags() {
  local tag_name
  local tag_value

  local artist_err=
  local year_err=
  local album_err=
  local number_err=
  local title_err=

  local unexpected_tags=()

  while read -r tag_name tag_value; do
    case "$tag_name" in
      "$artist_tag") [[ $tag_value != "$artist" ]] && artist_err=$tag_value ;;
      "$album_tag")  [[ $tag_value != "$album"  ]] && album_err=$tag_value ;;
      "$title_tag")  [[ $tag_value != "$title"  ]] && title_err=$tag_value ;;

      "$year_tag")
        if [[ $years_enabled == true ]]; then
          [[ $tag_value != "$year" ]] && year_err=$tag_value
        else
          unexpected_tags+=("$tag_name")
        fi ;;

      "$number_tag")
        if [[ $album_dirs_enabled == true ]]; then
          [[ $tag_value != "$number" ]] && number_err=$tag_value
        else
          unexpected_tags+=("$tag_name")
        fi ;;

       *) unexpected_tags+=("$tag_name") ;;
    esac
  done < <(read_tags "$path")

  if [[
    $artist_err ||
    $year_err   ||
    $album_err  ||
    $number_err ||
    $title_err  ||
    ${#unexpected_tags[@]} -gt 0
  ]]; then
    if [[ $verbose == true ]]; then
      echo
      echo "$path"
      [[ $artist_err ]] && echo "  Artist ($artist_tag tag) is '$artist_err' but should be '$artist'"
      [[ $year_err ]]   && echo "  Year ($year_tag tag) is '$year_err' but should be '$year'"
      [[ $album_err ]]  && echo "  Album ($album_tag tag) is '$album_err' but should be '$album'"
      [[ $number_err ]] && echo "  Track ($number_tag tag) is '$number_err' but should be '$number'"
      [[ $title_err ]]  && echo "  Title ($title_tag tag) is '$title_err' but should be '$title'"
      [[ ${#unexpected_tags[@]} -gt 0 ]] && echo "  Unexpected tags: $(list_args "${unexpected_tags[@]}")"
    else
      echo "Invalid tag: $path"
    fi >&2
    return 1
  fi
}

update_tags() {
  if [[ $path == *.m4a ]]; then
    update_tags_m4a
  else
    update_tags_id3
  fi

  if [[ $verbose == true ]]; then
    echo
    echo "$path"
    {
      printf "  Artist\t(%s tag):\t%s\n" "$artist_tag" "$artist"
      if [[ $years_enabled == true ]]; then
        printf "  Year\t(%s tag):\t%s\n" "$year_tag" "$year"
      fi
      printf "  Album\t(%s tag):\t%s\n" "$album_tag" "$album"
      if [[ $album_dirs_enabled == true ]]; then
        printf "  Track\t(%s tag):\t%s\n" "$number_tag" "$number"
      fi
      printf "  Title\t(%s tag):\t%s\n" "$title_tag" "$title"
    } | column --table --separator=$'\t'
  else
    echo "Updated tags: $path"
  fi
}

update_tags_id3() {
  id3 --delete "$path"

  local opts=(
    --artist "$artist"
    --album "$album"
    --title "$title"
  )

  if [[ $album_dirs_enabled == true ]]; then
    opts+=(--track "$number")
  fi

  if [[ $years_enabled == true ]]; then
    opts+=(--year "$year")
  fi

  id3 -2 "${opts[@]}" "$path"
}

update_tags_m4a() {
  tagutil clear: "$path"

  local opts=(
    "set:artist=$artist"
    "set:album=$album"
    "set:title=$title"
  )

  if [[ $album_dirs_enabled == true ]]; then
    opts+=("set:track=$number")
  fi

  if [[ $years_enabled == true ]]; then
    opts+=("set:year=$year")
  fi

  tagutil "${opts[@]}" "$path"
}

read_tags() {
  if [[ $path == *.m4a ]]; then
    read_tags_m4a
  else
    read_tags_id3
  fi
}

read_tags_id3() {
  local line
  local name=
  local value=

  while IFS=$'\t' read -r line; do
    if [[ $line =~ ^\{[a-zA-Z0-9]+\}$ ]]; then
      name=${line:1:-1}
    elif [[ $line != '#'* ]]; then
      value=$line
    fi

    if [[ $name && $value ]]; then
      echo "$name $value"
      name=
      value=
    fi
  done < <(id3 -v "$path")
}

read_tags_m4a() {
  local prefix
  local name
  local value

  while read -r prefix name value; do
    if [[ $prefix == - && $name == *: ]]; then
      echo "${name%:} $value"
    fi
  done < <(tagutil "$path")
}

main "$@"
