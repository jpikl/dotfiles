#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

readonly FORMAT="--format=%(refname:short)"

help() {
  cat <<-EOT
		List git branches.

		Usage:
		  $(self) [options]

		Options:
		  -c  Include current branch.
		  -l  Include local branches.
		  -r  Include remote branches.
		  -g  Include tracking branches no longer on remote.
		  -x  Remove remote prefix from branch name.
		  -h  Display this help.
	EOT
}

main() {
  local current=false
  local local=false
  local remote=false
  local gone=false
  local no_prefix=false
  local opt

  while getopts ":clrgxh" opt; do
    case "$opt" in
      c) current=true ;;
      l) local=true ;;
      r) remote=true ;;
      g) gone=true ;;
      x) no_prefix=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  if [[ $no_prefix = true ]]; then
    { # We want to print mix of local and remote branches.
      print_enabled_local
      print_enabled_remote | remove_remote_prefix
    } | LC_ALL=C sort | uniq
  else
    # We want to print local branches before the remote ones.
    print_enabled_local | sort | uniq
    print_enabled_remote | sort
  fi
}

print_enabled_local() {
  [[ $current = true ]] && print_current
  [[ $local = true ]] && print_local
  [[ $gone = true ]] && print_gone
  true
}

print_enabled_remote() {
  [[ $remote = true ]] && print_remote
  true
}

print_current() {
  # "git branch --show-current" requires git >=2.21
  git rev-parse --abbrev-ref HEAD
}

print_local() {
  git branch $FORMAT | grep --invert-match 'HEAD detached' || true
}

print_remote() {
  git branch --remote $FORMAT | grep --invert-match '/HEAD$' || true
}

print_gone() {
  print_local | grep --fixed-strings \
                     --line-regexp \
                     --invert-match \
                     --file=<(print_remote | remove_remote_prefix)
}

remove_remote_prefix() {
  sed --regexp-extended --expression='s/^[^/]*\///'
}

main "$@"
