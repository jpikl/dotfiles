#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Find upwards in directory tree.

		Usage:
		  $(self) [<options>] [<path>...] [<expression>]

		Args:
		  <options>    Options accepted by the find command.
		  <path>...    Search starting points.
		  <expression> Expression accepted by the find command.

		Default path is the current working directory.
		Default expression is '-maxdepth 1 -print'.

		See 'find -help' or 'man find' for more details.
	EOT
}

main() {
  # Check for help option
  local arg
  for arg; do
    [[ $arg =~ ^(-h|-?-help)$ ]] && help && exit
  done

  # Consume options
  local options=()
  while [[ $# -gt 0 && $1 =~ ^(-H|-L|-P|-O.*|-D)$ ]]; do
    options+=("$1")
    if [[ $1 == -D ]]; then
      if [[ $# -eq 1 ]]; then
        find "${options[@]}" # Missing argument => fail with correct error message
        die_help "-D option requires an argument" # Should not be needed
      fi
      options+=("$2")
      shift 2
    else
      shift
    fi
  done

  # Consume paths
  local paths=()
  while [[ $# -gt 0 && $1 != -* && $1 != "(" ]]; do
    paths+=("$1")
    shift
  done

  # Default path if none were passed
  if [[ "${#paths[@]}" -eq 0 ]]; then
    paths=(".")
  fi

  # Process every path upwards
  local path
  for path in "${paths[@]}"; do
    while true; do
      find "${options[@]}" "$path" -maxdepth 1 "$@"
      if [[ $path -ef / ]]; then
        break # We are at the root
      elif [[ $path == /* ]]; then
        path=$(dirname "$path") # Absolute path
      elif [[ $path == */ ]]; then
        path+=".." # Relative path ending with /
      else
        path+="/.." # Relative path not ending with /
      fi
    done
  done
}

main "$@"
