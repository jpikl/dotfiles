#!/usr/bin/env bash

set -euo pipefail

source ~/.local/lib/bash/core.sh
source ~/.local/lib/bash/path.sh

help() {
  cat <<-EOT
		Generate M3U playlists from MPD database.

		Usage:
		  $(self) [<options>] <year>...
		  $(self) [<options>] -a

		Args:
		  <year>... Years for which generate playlists.

		Options:
		  -m <dir>  Path to MPD music directory.
		  -o <dir>  Path to output directory.
		  -a        Use every year found in MPD database.
		  -v        Verbose mode with additional output.
		  -h        Print this help.

		Environment vars:
		  USER_MUSIC_DIR      Default path to MPD music directory.
		  USER_PLAYLISTS_DIR  Default path to output directory.

		Playlists are organized by year using the following pattern.
		  "{year}/{artist} - {album}.m3u"
	EOT
}

main() {
  local music_dir
  local output_dir
  local all=false
  local verbose=false
  local opt

  music_dir=$(path_from_env USER_MUSIC_DIR)
  output_dir=$(path_from_env USER_PLAYLISTS_DIR)

  while getopts ":m:o:avh" opt; do
    case "$opt" in
      m) music_dir=$(path_make_absolute "$OPTARG") ;;
      o) output_dir=$(path_make_absolute "$OPTARG") ;;
      a) all=true ;;
      v) verbose=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  [[ $output_dir ]] || die "no music directory specified"
  [[ $music_dir ]] || die "no output directory specified"

  [[ -d $output_dir ]] || die "'$output_dir' is not a directory"
  [[ -d $music_dir ]] || die "'$music_dir' is not a directory"

  [[ $verbose == true ]] && echo "Updating MPD database"
  mpc update --wait --quiet # Check mpd is running + update database

  local years
  if [[ $all == true ]]; then
    mapfile -t years < <(mpc list Date)
    if [[ ${#years[@]} -eq 1 && ! ${years[0]} ]]; then
      die "no year found in MPD database"
    fi
  elif [[ $# -gt 0 ]]; then
    years=("$@")
  else
    die_missing_arg
  fi

  local year
  for year in "${years[@]}"; do
    gen_playlists_year "$year"
  done
}

gen_playlists_year() {
  local year=$1
  local artist album

  echo "Generating playlists for $year"

  while IFS='␝' read -r artist album; do
    gen_playlist_album "$year" "$artist" "$album"
  done < <(mpc --format='%artist%␝%album%' search Date "$year" | uniq)
}

gen_playlist_album() {
  local year=$1
  local artist=$2
  local album=$3

  artist=$(sanitize_name "$artist")
  album=$(sanitize_name "$album")

  local playlist_dir=$output_dir/$year
  mkdir --parents "$playlist_dir"

  local playlist_file="$playlist_dir/$artist - $album.m3u"
  [[ $verbose == true ]] && echo "  $playlist_file"

  local prefix
  prefix=$(realpath --relative-to="$playlist_dir" "$music_dir")/
  prefix=${prefix//\//\\\\} # '/' to '\'

  {
    echo "#EXTM3U"
    mpc search Date "$year" Artist "$artist" Album "$album" \
      | sed --regexp-extended \
            --expression="s/^/$prefix/" \
            --expression='s/\//\\/g' # '/' to '\'
  } > "$playlist_file"
}

sanitize_name() {
  local name=$1

  name=${name//\//-} # '/' to '-'
  name=${name//:/ -} # ':' to ' -'
  name=${name//\?/}  # Remove '?'

  echo "$name"
}

main "$@"
