#!/usr/bin/env bash

set -euo pipefail

source ~/.local/lib/bash/core.sh

readonly COMMANDS=(
  "fb   Fetch branches"
  "ffb  Fast-forward branches"
  "cb   Checkout branch"
  "ct   Checkout tag"
  "mb   Merge branch"
  "mt   Merge tag"
  "rb   Rebase onto branch"
  "rt   Rebase onto tag"
  "pb   Push branch"
  "pt   Push tag"
  "db   Delete branches"
  "dt   Delete tags"
  "drb  Delete remote branches"
  "drt  Delete remote tags"
  "du   Delete untracked files"
  "cmr  Compare revisions"
  "cmb  Compare branches"
  "cmt  Compare tags"
  "a    Add changes/files"
  "aw   Add work tree changes"
  "au   Add untracked files"
  "rs   Restore staged changes"
  "rw   Restore work tree changes"
)

help() {
  cat <<-EOT
		Execute git commands interactively.

		Usage:
		  $(self) [<options>] [<command>]

		Command:
		$(print_commands)

		Options:
		  -h  Print this help.
	EOT
}

main() {
  local opt

  while getopts ":h" opt; do
    case "$opt" in
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  # Check we are in a git repository.
  git status --porcelain >/dev/null

  local command
  if [[ $# -gt 0 ]]; then
    command=$1
  else
    command=$(choose_command)
    [[ $command ]] || return 0
  fi

  case "$command" in
    fb)  fetch_branches ;;
    ffb) fast_forward_branches ;;
    cb)  checkout_branch ;;
    ct)  checkout_tag ;;
    mb)  merge_branch ;;
    mt)  merge_tag ;;
    rb)  rebase_branch ;;
    rt)  rebase_tag ;;
    pb)  push_branch ;;
    pt)  push_tag ;;
    db)  delete_branches ;;
    dt)  delete_tags ;;
    drb) delete_remote_branches ;;
    drt) delete_remote_tags ;;
    du)  delete_untracked_files ;;
    cmr) compare_revision ;;
    cmb) compare_branches ;;
    cmt) compare_tags ;;
    a)   add_changes ;;
    aw)  add_wtree_changes ;;
    au)  add_untracked_files ;;
    rs)  restore_staged_changes ;;
    rw)  restore_wtree_changes ;;
    *)   die_help "invalid command '$command'"
  esac
}

print_commands() {
  printf "  %s\n" "${COMMANDS[@]}"
}

print_command_names() {
  local command
  local name

  while read -r command name; do
    echo "$name"
  done < <(print_commands)
}

choose_command() {
  local command
  local name
  local chosen_name

  chosen_name=$(print_command_names | choose -ip "Command:")

  while read -r command name; do
    if [[ $name = "$chosen_name" ]]; then
      echo "$command"
      break
    fi
  done < <(print_commands)
}

fetch_branches() {
  git ls-branches -rs | choose_multiple "Fetch branches:" | run git fetch origin
}

fast_forward_branches() {
  git ls-branches -b | choose_multiple "Fast-forward branches:" | run git fast-forward
}

checkout_branch() {
  git ls-branches -lrCs | choose_one "Checkout branch:" | run git checkout
}

checkout_tag() {
  git lst -lr | choose_one "Checkout tag:" | run git checkout
}

merge_branch() {
  git ls-branches -lrC | choose_one "Merge branch to ""$(git ls-branches -c)"":" | run git merge
}

merge_tag() {
  git lst -lr | choose_one "Merge tag to ""$(git ls-branches -c)"":" | run git merge
}

rebase_branch() {
  git ls-branches -lrC | choose_one "Rebase ""$(git ls-branches -c)"" onto branch:" | run git rebase
}

rebase_tag() {
  git lst -lr | choose_one "Rebase ""$(git ls-branches -c)"" onto tag:" | run git rebase
}

push_branch() {
  git ls-branches -lRs | choose_one "Push branch:" | confirm_and_run git push --set-upstream origin
}

push_tag() {
  git lst -lR | choose_one "Push tag:" | confirm_and_run git push origin
}

delete_branches() {
  git ls-branches -lC | choose_multiple "Delete branches:" | confirm_and_run git branch --delete
}

delete_tags() {
  git lst -l | choose_multiple "Delete tags:" | confirm_and_run git tag --delete
}

delete_remote_branches() {
  git ls-branches -rs | choose_multiple "Delete remote branches:" | confirm_and_run git push origin --delete
}

delete_remote_tags() {
  git lst -r | choose_multiple "Delete remote tags:" | confirm_and_run git push origin --delete
}

delete_untracked_files() {
  git ls-changes -x | choose_multiple "Delete untracked files:" | confirm_and_run rm -rf --
}

compare_revision() {
  { git ls-branches -lr; git ls-tags -lr; } | choose_multiple "Compare revisions:" | run git compare
}

compare_branches() {
  git ls-branches -lr | choose_multiple "Compare branches:" | run git compare
}

compare_tags() {
  git ls-branches -b | choose_multiple "Fast-forward branches:" | run git fast-forward
}

add_changes() {
  git ls-changes -wx | choose_multiple "Add changes/files:" | run git add --
}

add_wtree_changes() {
  git ls-changes -w | choose_multiple "Add work tree changes:" | run git add --
}

add_untracked_files() {
  git ls-changes -x | choose_multiple "Add untracked files:" | run git add --
}

restore_staged_changes() {
  git ls-changes -s | choose_multiple "Restore staged changes:" | run git restore --staged --
}

restore_wtree_changes() {
  git ls-changes -w | choose_multiple "Restore work tree changes:" | run git restore --
}

choose_one() {
  choose -ip "$1"
}

choose_multiple() {
  choose -imp "$1"
}

run() {
  xargs --no-run-if-empty "$@"
}

confirm_and_run() {
  run --interactive "$@"
}

main "$@"
