#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/args.sh"

help() {
  cat <<-EOT
		Generate expression for the find command.

		Usage:
		  $(self) [options]

		Options:
		  -l  Print expressions on separate lines.
		  -G  Exclude .git directories.
		  -P  Exclude project metadata.
		  -L  Exclude libraries.
		  -O  Exclude compilation output.
		  -s  Include source file only. Same as -GPLO.
		  -h  Display this help.

		Examples:
		  Find HEAD files outside .git directory:
		  $(self) -G | xargs -t find . -name HEAD

		  Find *.xml files between source files:
		  $(self) -s | xargs -t find . -name '*.xml'
	EOT
}

main() {
  local lines=false
  local ignore_git=false
  local ignore_project=false
  local ignore_libs=false
  local ignore_compiled=false
  local opt

  while getopts ":lGPLOsh" opt; do
    case "$opt" in
      l) lines=true ;;
      G) ignore_git=true ;;
      P) ignore_project=true ;;
      L) ignore_libs=true ;;
      O) ignore_compiled=true ;;
      s) ignore_git=true
         ignore_project=true
         ignore_libs=true
         ignore_compiled=true
         ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  local ignored_dirs=()

  if [[ $ignore_git = true ]]; then
    ignored_dirs+=(".git")
  fi

  if [[ $ignore_project = true ]]; then
    ignored_dirs+=(".idea")
  fi

  if [[ $ignore_libs = true ]]; then
    ignored_dirs+=("node_modules" "!dependsrc")
  fi

  if [[ $ignore_compiled = true ]]; then
    ignored_dirs+=("target" ".happypack")
  fi

  local expression=()
  local dir

  for dir in "${ignored_dirs[@]}"; do
    expression+=("-not" "(" "-path" "*/$dir/*" "-prune" ")")
  done

  if [[ ${#expression[@]} -gt 0 ]]; then
    if [[ $lines = true ]]; then
      printf "%s\n" "${expression[@]}"
    else
      echo "${expression[@]}"
    fi
  fi
}

main "$@"
