#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Synchronize two directories. Simple rsync frontend.

		Usage:
		  $(self) [options] [--] <source> <dest>

		Args:
		  <source>  Source directory.
		  <dest>    Destination directory.

		Options:
		  -t  Preserve only modification times.
		  -e  Optimize for exFAT filesystem.
		  -f  No dry run and skip confirmation.
		  -h  Print this help.
	EOT
}

main() {
  local times_only=false
  local exfat=false
  local force=false
  local opt

  while getopts ":tefh" opt; do
    case "$opt" in
      t) times_only=true ;;
      e) exfat=true ;;
      f) force=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  [[ $# -lt 2 ]] && die_missing_arg
  [[ -d $1 ]] || die "'$1' is not a directory"
  [[ -d $2 ]] || die "'$2' is not a directory"

  local source
  local dest=$2

  if [[ $1 == */ ]]; then
    source=$1
  else
    source=$1/ # Source directory MUST end with /.
  fi

  if [[ $source -ef $dest ]]; then
    die "'$source' and '$dest' point to the same directory"
  fi

  local opts=("--delete" "--human-readable")

  if [[ $times_only = true ]]; then
      opts+=("--recursive" "--times")
  else
      opts+=("--archive")
  fi

  if [[ $exfat == true ]]; then
      opts+=("--modify-window=1" "--exclude='System Volume Information'")
  fi

  local opts_info=("--itemize-changes" "--stats")
  local opts_progress=("--info=progress2")

  if [[ $force = true ]]; then
    echo "Synchronizing '$source' to '$dest'"
    rsync "${opts[@]}" "${opts_info[@]}" "${opts_progress[@]}" -- "$source" "$dest"
  else
    echo "Detecting differences from '$source' to '$dest'"
    rsync "${opts[@]}" "${opts_info[@]}" --dry-run -- "$source" "$dest"
    echo

    if confirm "Continue with synchronization?"; then
        echo "Synchronizing '$source' to '$dest'"
        rsync "${opts[@]}" "${opts_progress[@]}" -- "$source" "$dest"
    fi
  fi
}

main "$@"
