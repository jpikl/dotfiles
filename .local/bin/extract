#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Extract archive in nearly any format.

		Usage:
		  $(self) [options] [--] <file>...

		Options:
		  -d  Ensure a containing directory.
		  -f  Force extraction even if output files aready exist.
		  -l  List archive contents instead of extraction.
		  -v  Verbose mode with additional output.
		  -s  Skip extraction errors.
		  -h  Print this help.

		File:
		  One or more files to extract.
	EOT
}

main() {
  local wrap=false
  local force=false
  local list=false
  local verbose=false
  local skip_errors=false
  local opt

  while getopts ":dflvsh" opt; do
    case "$opt" in
      d) wrap=true ;;
      f) force=true ;;
      l) list=true ;;
      v) verbose=true ;;
      s) skip_errors=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))
  [[ $# -eq 0 ]] && die_missing_arg

  local file
  for file; do
    extract "$file"
  done
}

extract() {
  if [[ $verbose == true ]]; then
    echo "---------- $1 ----------"
  elif [[ $list == false ]]; then
    echo "Extracting '$1'"
  fi

  if [[ ! -f "$1" ]]; then
    handle_error "'$1' is not a file"
    return
  fi

  case "${1,,}" in # To lower case.
    # =============== Tar archives + compression only tools ===============

    *.tar)      extract_tar "$1" ;;

    *.tar.bz)   ;&
    *.tar.bz2)  ;&
    *.tbz)      ;&
    *.tbz2)     extract_tar "$1" "bzip2" ;;

    *.taz)      ;&
    *.tar.gz)   ;&
    *.tar.z)    ;&
    *.tgz)      ;&
    *.tz)       extract_tar "$1" "gzip" ;;

    *.tar.lrz)  ;&
    *.tlrz)     extract_tar "$1" "lrzip" ;;

    *.tlz4)     ;&
    *.tar.lz4)  extract_tar "$1" "lz4" ;;

    *.tar.lz)   ;&
    *.tlz)      extract_tar "$1" "lzip" ;;

    *.tar.lzma) ;&
    *.tlzma)    extract_tar "$1" "lzma" ;;

    *.tar.lzo)  ;&
    *.tar.lzop) ;&
    *.tlzo)     ;&
    *.tlzop)    extract_tar "$1" "lzop" ;;

    *.tar.xz)   ;&
    *.txz)      extract_tar "$1" "xz" ;;

    *.tar.zst)  ;&
    *.tzst)     extract_tar "$1" "zst" ;;

    # =============== Compression only tools ===============

    *.bz)   ;&
    *.bz2)  extract_compression "$1" "bzip2";;

    *.gz)   ;&
    *.z)    extract_compression "$1" "gzip";;

    *.lrz)  extract_compression "$1" "lrzip" ;;
    *.lz4)  extract_compression "$1" "lz4" ;;
    *.lz)   extract_compression "$1" "lzip" ;;
    *.lzo)  extract_compression "$1" "lzop" ;;
    *.lzma) extract_compression "$1" "lzma" ;;
    *.xz)   extract_compression "$1" "xz" ;;
    *.zst)  extract_compression "$1" "zstd" ;;

    # =============== Archiving and compression tools ===============

    *.7z)  extract_7z  "$1" ;;
    *.rar) extract_rar "$1" ;;

    *.aar) ;&
    *.apk) ;&
    *.ipsw) ;&
    *.jar) ;&
    *.sublime-package) ;&
    *.war) ;&
    *.whl) ;&
    *.xpi) ;&
    *.zip) extract_zip "$1" ;;

    # =============== Everything else ===============

    *) handle_error "'$1' has unsupported archive extension" ;;
  esac
}

extract_tar() {
  if [[ $list == true ]]; then
    list_tar "$@" | sort || handle_error
    return
  fi

  local opts=(
    "--extract" # Do extraction.
    "--file=$1" # Use the input file.
  )

  if [[ $# -ge 2 ]]; then
    opts+=("$(get_tar_compressor "$2")")
  fi

  if [[ $force = true ]]; then
    opts+=("--overwrite") # Overwrite existing files.
  else
    opts+=("--keep-old-files") # Don't replace existing files, treat them as errors.
  fi

  if [[ $verbose = true ]]; then
    opts+=("--verbose") # Verbose output.
  fi

  if [[ $wrap == true && $(list_tar "$@" | count_root_entries) -gt 1 ]]; then
    local out_dir=${1%.*} # Remove file extension.
    if [[ $out_dir == *.tar ]]; then
      out_dir=${out_dir%.*} # Once again if the extension was ".tar.*".
    fi
    mkdir -p "$out_dir"
    opts+=("--directory=$out_dir") # Output directory.
  fi

  tar "${opts[@]}" || handle_error
}

list_tar() {
  local opts=(
    "--list"    # Do listing.
    "--file=$1" # Use the input file.
  )

  if [[ $# -ge 2 ]]; then
    opts+=("$(get_tar_compressor "$2" --quiet)")
  fi

  tar "${opts[@]}"
}

get_tar_compressor() {
  if tar "--$1" --help &>/dev/null; then
    echo -n  "--$1" # Tar has native support for such compression.
  else
    # We have to specify a command to do the extraction.
    # Tar expect it to accept -d option, for decompression.
    # We also expect that it supports --quit option to suppress
    # unnecessary output. This is needed for lrzip and lz4.
    echo -n "--use-compress-program=$1"
    if [[ $verbose = false || ${2-} == --quiet ]]; then
      echo -n  " --quiet"
    fi
  fi
}

extract_compression() {
  local output=${1%.*} # Remove file extension.

  if [[ $list == true ]]; then
    echo "$output"
    return
  fi

  if [[ -f "$output" && $force == false ]] && ! confirm "Overwrite '$output'?"; then
      return
  fi

  local opts=(
    "--decompress" # Do decompression.
    "--force"      # Overwrite an existing output file.
  )

  if [[ $2 != lrzip ]]; then
    opts+=("--keep") # Don't delete the input file.
  fi

  if [[ $verbose = true ]]; then
    opts+=("--verbose") # Verbose output.
  else
    opts+=("--quiet") # Quiet mode.
  fi

  "$2" "${opts[@]}" "$1" || handle_error
}

extract_7z() {
  if [[ $list == true ]]; then
    list_7z "$@" | sort || handle_error
    return
  fi

  local opts=("x") # Do extraction.

  if [[ $force = true ]]; then
    opts+=("-aoa") # Overwrite existing files without prompting.
  fi

  if [[ $verbose = false ]]; then
    # 7z does not have an option to be completely silent.
    # We would have to redirect its output to /dev/null, however
    # there is no way to redirect confirmation messages to stderr.
    opts+=("-ba" "-bb0" "-bd") # Disable header, log and progress indicator.
  else
    opts+=("-bb3") # Log everything.
  fi

  if [[ $wrap == true && $(list_7z "$1" | count_root_entries) -gt 1 ]]; then
    opts+=("-o${1%.*}") # Output directory.
  fi

  if [[ $verbose = false && $force = true ]]; then
    # In this particular case, where no confirmation is needed,
    # we can safely redirect all output to /dev/null.
    7z "${opts[@]}" "$1" >/dev/null || handle_error
  else
    7z "${opts[@]}" "$1" || handle_error
  fi
}

list_7z() {
  7z l -ba -spf "$1" | sed -E 's/^\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+//'
}

extract_rar() {
  if [[ $list == true ]]; then
    list_rar "$@" | sort || handle_error
    return
  fi

  local opts=("x") # Do extraction.

  if [[ $force = true ]]; then
    opts+=("-o+") # Overwrite existing files without prompting.
  fi

  if [[ $verbose = false ]]; then
    opts+=("-idq") # Quiet mode.
  fi

  opts+=("$1") # Input file

  if [[ $wrap == true && $(list_rar "$1" | count_root_entries) -gt 1 ]]; then
    opts+=("${1%.*}/") # Output directory.
  fi

  unrar "${opts[@]}" || handle_error
}

list_rar() {
  unrar lb "$1"
}

extract_zip() {
  if [[ $list == true ]]; then
    list_zip "$1" | sort || handle_error
    return
  fi

  local opts=()

  if [[ $force = true ]]; then
    opts+=("-o") # Overwrite existing files without prompting.
  fi

  if [[ $verbose = false ]]; then
    opts+=("-qq") # Very quiet mode.
  fi

  if [[ $wrap == true && $(list_zip "$1" | count_root_entries) -gt 1 ]]; then
    opts+=("-d" "${1%.*}") # Output directory.
  fi

  unzip "${opts[@]}" "$1" || handle_error
}

list_zip() {
  unzip -Z1 "$1"
}

count_root_entries() {
  grep --count '^[^/]*/\?$'
}

handle_error() {
  [[ ${1-} ]] && alert "$1" >&2
  [[ $skip_errors = true ]] || die
}

main "$@"
