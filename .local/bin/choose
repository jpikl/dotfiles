#!/usr/bin/env bash

set -euo pipefail

source ~/.local/lib/bash/core.sh

help() {
  cat <<-EOT
		Let user choose from values. Simple fzf frontend with Bash fallback.

		Usage:
		  $(self) [<options>] [<value>...]

		Args:
		  <value>...  Values to select from.

		Options:
		  -p <msg>    Message to print as a prompt.
		  -d <value>  Default value to print if nothing was chosen.
		  -a          Automatically select the only match.
		  -m          Enable selection of multiple values.
		  -i          Read values as lines from stdin.
		  -z          Read values delimited by NUL, not newline.
		  -Z          Print values delimited by NUL, not newline.
		  -b          Force pure Bash interface instead of fzf.
		  -h          Print this help.
	EOT
}

main() {
  local prompt=
  local default=
  local auto=false
  local multi=false
  local stdin=false
  local null_in=false
  local null_out=false
  local basic=false
  local opt

  while getopts ":p:d:amizZbh" opt; do
    case "$opt" in
      p) prompt=$OPTARG ;;
      d) default=$OPTARG ;;
      a) auto=true ;;
      m) multi=true ;;
      i) stdin=true ;;
      z) null_in=true ;;
      Z) null_out=true ;;
      b) basic=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  local values=("$@")
  local results=()

  if [[ $basic = false && -x "$(command -v fzf)" ]]; then
    fzf_mode
  else
    basic_mode
  fi

  if [[ ${#results[@]} -eq 0 ]]; then
    if [[ $default ]]; then
      results=("$default")
    else
      exit 0
    fi
  fi

  if [[ $null_out = true ]]; then
    printf "%s\0" "${results[@]}"
  else
    printf "%s\n" "${results[@]}"
  fi
}

fzf_mode() {
  local opts=("--exit-0" "--print0")

  if [[ $stdin == true ]]; then
    export FZF_DEFAULT_COMMAND=cat # To force reading from stdin
    if [[ $null_in = true ]]; then
      opts+=("--read0")
    fi
  elif [[ ${#values[@]} -gt 0 ]]; then
    exec < <(printf "%s\0" "${values[@]}")
    opts+=("--read0")
  else
    exec </dev/null # To fail fast using the --exit-0 option
  fi

  if [[ $auto == true ]]; then
    opts+=("--select-1")
  fi

  if [[ $multi == true ]]; then
    opts+=("--multi")
  fi

  if [[ $prompt ]]; then
    opts+=("--prompt=$prompt ")
  fi

  mapfile -td '' results < <(fzf "${opts[@]}")
}

basic_mode() {
  if [[ $stdin == true ]]; then
    if [[ $null_in = true ]]; then
      mapfile -td '' values
    else
      mapfile -t values
    fi
    exec < "/dev/tty"
  fi

  if [[ ${#values[@]} -eq 1 && $auto == true ]]; then
    results=("${values[0]}")
  elif [[ ${#values[@]} -ge 1 || $multi == true ]]; then
    local choice
    while true; do
      if [[ $prompt ]]; then
        echo "$prompt"
      fi
      select choice in "${values[@]}"; do
        if [[ $choice ]]; then
          results+=("$choice")
          if [[ $multi = true ]]; then
            mapfile -td '' values < <(remove_value "$choice" "${values[@]}")
          fi
          break
        fi
      done || break
      if [[ $multi == false || ${#values[@]} -eq 0 ]]; then
        break
      fi
    done
  fi
} >&2

remove_value() {
  local value=$1
  shift
  printf "%s\0" "$@" | grep --null \
                            --null-data \
                            --invert-match \
                            --line-regexp \
                            --fixed-strings \
                            "$value"
}

main "$@"
