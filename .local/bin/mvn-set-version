#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/args.sh"
source "$BASH_LIB_DIR/utils.sh"

print_help() {
  cat <<-EOT
		Set version of a maven project.

		Usage:
		  $(self) [options] <version>

		Options:
		  -b, --backup   Create backup of original pom.xml files.
		  -v, --verbose  Verbose mode with additional output.
		  -h, --help     Display this help.

		Version:
		  New version to set.
	EOT
}

set_version() {
  is_printable "$1" || die "version is blank"
  version=$1
}

process_args() {
  local -r short_opts=bvh
  local -r long_opts=backup,verbose,help
  local args

  args=$(get_args "$short_opts" "$long_opts" "$@")
  eval set -- "$args"

  while true ; do
    case "$1" in
      -b|--backup)  backup=true; shift ;;
      -v|--verbose) verbose=true; shift ;;
      -h|--help)    print_help; exit ;;
      --)           shift; break ;;
      *)            die_unprocessable_args ;;
    esac
  done

  if [[ $# -ge 1 ]]; then
    set_version "$1"
  else
    die_missing_args
  fi
}

mvn_set_version() {
  [[ -f pom.xml ]] || die "no pom.xml in the current directory"

  local args=()

  if [[ $verbose = false ]]; then
    args+=("--quiet")
  fi

  args+=("versions:set" "-DgenerateBackupPoms=$backup")

  if [[ $version ]]; then
    args+=("-DnewVersion=$version")
  fi

  mvn "${args[@]}"
}

function main() {
  local backup=false
  local verbose=false
  local version

  process_args "$@"
  mvn_set_version
}

main "$@"
