#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/args.sh"

help() {
  cat <<-EOT
		Generate expression for the find command.

		Usage:
		  $(self) [options]

		Options:
		  -l, --lines               Print expressions on a separate lines.
		  -G, --ignore-git          Ignore .git directories.
		  -P, --ignore-project      Ignore project metadata.
		  -L, --ignore-libs         Ignore libraries.
		  -O, --ignore-compiled     Ignore compilation output.
		  -s, --ignore-non-sources  Same as --ignore-{git,project,libs,compiled}.
		  -h, --help                Display this help.

		Examples:
		  # Find HEAD files outside .git directory.
		  $(self) -G | xargs -t find . -name HEAD

		  # Find *.xml files between source files.
		  $(self) -s | xargs -t find . -name '*.xml'
	EOT
}

init() {
  local -r short_opts=lGPLOsh
  local -r long_opts=lines,ignore-git,ignore-project,ignore-libs,ignore-compiled,ignore-non-sources,help
  local args

  args=$(get_args "$short_opts" "$long_opts" "$@")
  eval set -- "$args"

  while true ; do
    case "$1" in
      -l|--lines)              lines=true; shift; ;;
      -G|--ignore-git)         ignore_git=true; shift; ;;
      -P|--ignore-project)     ignore_project=true; shift; ;;
      -L|--ignore-libs)        ignore_libs=true; shift; ;;
      -O|--ignore-compiled)    ignore_compiled=true; shift; ;;
      -s|--ignore-non-sources) ignore_git=true
                               ignore_project=true
                               ignore_libs=true
                               ignore_compiled=true
                               shift ;;
      -h|--help)               help; exit ;;
      --)                      shift; break ;;
      *)                       die_unprocessable_args ;;
    esac
  done
}

get_find_expression() {
  local ignored_dirs=()

  if [[ $ignore_git = true ]]; then
    ignored_dirs+=(".git")
  fi

  if [[ $ignore_project = true ]]; then
    ignored_dirs+=(".idea")
  fi

  if [[ $ignore_libs = true ]]; then
    ignored_dirs+=("node_modules" "!dependsrc")
  fi

  if [[ $ignore_compiled = true ]]; then
    ignored_dirs+=("target" ".happypack")
  fi

  local expression=()

  for dir in "${ignored_dirs[@]}"; do
    expression+=("-not" "(" "-path" "*/$dir/*" "-prune" ")")
  done


  if [[ ${#expression[@]} -gt 0 ]]; then
    if [[ $lines = true ]]; then
      printf "%s\n" "${expression[@]}"
    else
      echo "${expression[@]}"
    fi
  fi
}

function main() {
  lines=false
  ignore_git=false
  ignore_project=false
  ignore_libs=false
  ignore_compiled=false

  init "$@"
  get_find_expression
}

main "$@"
