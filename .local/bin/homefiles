#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		Initialize home directory structure.

		Usage:
		  $(self) [options]

		Options:
		  -d  Create directories for *_DIR environment variables.
		  -s  Create symbolic links for *_LINK environment variables.
		  -c  Create default .profile_local and .bashrc_local files.
		  -f  Download patched fonts for terminal.
		  -h  Display this help.
	EOT
}

main() {
  local directories=false
  local symbolic_links=false
  local local_config=false
  local fonts=false
  local opt

  while getopts ":dscfh" opt; do
    case "$opt" in
      d) directories=true ;;
      s) symbolic_links=true ;;
      c) local_config=true ;;
      f) fonts=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  [[ $directories = true ]] && create_dirs
  [[ $symbolic_links = true ]] && create_sym_links
  [[ $local_config = true ]] && create_profile_local
  [[ $local_config = true ]] && create_bashrc_local
  [[ $fonts = true ]] && download_fonts

  true # To reset exit code
}

create_dirs() {
  create_dir "$BACKUP_DIR"
  create_dir "$CACHE_DIR"
  create_dir "$CONFIG_DIR"
  create_dir "$DESKTOP_DIR"
  create_dir "$DOCUMENTS_DIR"
  create_dir "$DOWNLOAD_DIR"
  create_dir "$LOCAL_BIN_DIR"
  create_dir "$LOCAL_LIB_DIR"
  create_dir "$LOCAL_SHARE_DIR"
  create_dir "$MUSIC_DIR"
  create_dir "$PICTURES_DIR"
  create_dir "$PLAYLISTS_DIR"
  create_dir "$PRIVATE_DECRYPTED_DIR"
  create_dir "$PRIVATE_ENCRYPTED_DIR"
  create_dir "$PUBLIC_DIR"
  create_dir "$TEMP_DIR"
  create_dir "$VIDEOS_DIR"
  create_dir "$WORKSPACE_DIR"
}

create_dir() {
  if [[ ! -d $1 ]]; then
    echo "Creating directory '$1'"
    mkdir "$1"
  fi
}

create_sym_links() {
  create_sym_link "$BINARIES_LINK" "$LOCAL_BIN_DIR"
  create_sym_link "$CACHE_LINK" "$CACHE_DIR"
  create_sym_link "$CONFIG_LINK" "$CONFIG_DIR"
  create_sym_link "$DATA_LINK" "$LOCAL_SHARE_DIR"
  create_sym_link "$LIBRARIES_LINK" "$LOCAL_LIB_DIR"
  create_sym_link "$MEDIA_LINK" "$MEDIA_DIR"
  create_sym_link "$VOLUMES_LINK" "$VOLUMES_DIR"
}

create_sym_link() {
  if [[ ! -L $1 ]]; then
    echo "Creating symbolic link '$1' to '$2'"
    ln --symbolic --no-target-directory "$2" "$1"
  fi
}

create_profile_local() {
  local file=~/.profile_local

  if [[ ! -f $file ]] || confirm "Overwrite current $file?"; then
    {
      printf "# Generated by %s script.\n" "$(self)"
      printf "\n# Home directories\n"
      profile_export "[A-Z_]+_DIR" "MEDIA|VOLUME|_LIB_"
      printf "\n# Library directories\n"
      profile_export "[A-Z_]+_LIB_DIR"
      printf "\n# Links to directories\n"
      profile_export "[A-Z_]+_LINK"
    } >$file
  fi
}

create_bashrc_local() {
  local file=~/.bashrc_local

  if [[ ! -f $file ]] || confirm "Overwrite current $file?"; then
    printf "# Generated by %s script.\n" "$(self)" >$file
  fi
}

profile_export() {
  grep --extended-regexp --only-matching "$1" ~/.profile \
    | grep --extended-regexp --invert-match "${2:-#}" \
    | sort \
    | uniq \
    | xargs printf "#export %s=\n"
}

download_fonts() {
  local file
  for file in "Literation Mono Nerd Font Complete"{," Mono"}{," Windows Compatible"}.ttf; do
    download_font "https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/LiberationMono/complete/$file"
  done
}

download_font() {
  local font
  font=$(basename "$1")

  local dir=$LOCAL_SHARE_DIR/fonts
  local file=$dir/$font

  if [[ ! -f "$file" ]] || confirm "Redownload $font?"; then
    echo "Downloading $font"
    mkdir --parents "$dir"
    echo
    wget --no-verbose --output-document="$file" "$1" || rm --force "$file" # Clean up unfinished download.
    echo
  fi
}

main "$@"
