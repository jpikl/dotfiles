#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

help() {
  cat <<-EOT
		List or (un)mount disks. Simple lsblk and udisksctl frontend.

		Usage:
		  $(self) [<options>] [<command>]

		Commands:
		  l, list            List disks and their status.
		  m, mount   <disk>  Mount disk.
		  u, unmount <disk>  Unmount disk.
		  e, eject   <disk>  Unmount and power-off disk.
		  o, open    <disk>  Open disk mountpoint.

		Options:
		  -h  Print this help.

		Default command is 'list'.
	EOT
}

main() {
  local opt

  while getopts ":oh" opt; do
    case "$opt" in
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  local command=list
  if [[ $# -gt 0 ]]; then
    command=$1
    shift
  fi

  case $command in
    l|list) list_disks ;;
    m|mount) mount_disk "$@" ;;
    u|umount|unmount) unmount_disk "$@" ;;
    e|eject) eject_disk "$@" ;;
    o|open) open_mountpoint "$@" ;;
    *) die_help "invalid command '$command'" ;;
  esac
}

list_disks() {
  local kname pkname name type vendor model label size moutpoint
  local disk_kname disk_vendor disk_model

  while IFS=';' read -r kname pkname name type vendor model label size moutpoint; do
    if [[ $type == disk ]]; then
      disk_kname=$kname
      disk_vendor=$vendor
      disk_model=$model
    fi

    if [[ $type == part ]] || [[ $type == disk ]] && ! disk_has_partions "$kname"; then
      local status

      if [[ $moutpoint ]]; then
        status="x"
      else
        status=" "
      fi

      # We expect partions to follow after their parent disk
      if [[ $type == part && $pkname == "$disk_kname" ]]; then
        vendor=$disk_vendor
        model=$disk_model
      fi

      echo -e "[$status];$name;$(format_vendor_model "$vendor" "$model");$size;$label;$moutpoint"
    fi
  done < <(list_disks_raw) | column --table --separator=';'
}

list_disks_raw() {
  lsblk --raw \
        --noheadings \
        --output KNAME,PKNAME,NAME,TYPE,VENDOR,MODEL,LABEL,SIZE,MOUNTPOINT \
        --sort PATH \
    | tr --delete ';' \
    | tr ' ' ';'
}

disk_has_partions() {
  lsblk --raw --output PKNAME | grep --quiet --fixed-strings --line-regexp "$1"
}

format_vendor_model() {
  echo -e "$1 $2" | sed --regexp-extended \
                        --expression='s/_/ /g' \
                        --expression='s/\s+/ /g' \
                        --expression='s/\s+$//g'
}

mount_disk() {
  [[ $# -gt 0 ]] || die_help "mount requires an argument"
  udisksctl mount --block-device "$(get_block_device "$1")"
}

unmount_disk() {
  [[ $# -gt 0 ]] || die_help "unmount requires an argument"
  udisksctl unmount --block-device "$(get_block_device "$1")"
}

eject_disk() {
  [[ $# -gt 0 ]] || die_help "eject requires an argument"
  get_mountpoint "$1" >/dev/null && unmount_disk "$1"
  udisksctl power-off --block-device "$(get_block_device "$1")"
}

open_mountpoint() {
  [[ $# -gt 0 ]] || die_help "open requires an argument"
  local mountpoint
  mountpoint=$(get_mountpoint "$1") || die "$1 is not mounted"
  open "$mountpoint"
}

get_mountpoint() {
  lsblk --raw --noheadings --output MOUNTPOINT "$(get_block_device "$1")" \
    | grep --extended-regexp '.+' # Fail on empty output
}

get_block_device() {
  local device="/dev/$1"
  [[ -b $device ]] || die "$device is not a block device"
  echo "$device"
}

main "$@"
