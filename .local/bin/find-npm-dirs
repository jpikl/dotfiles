#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/utils.sh"
source "$BASH_LIB_DIR/args.sh"

print_help() {
  cat <<-EOT
		Find directories of node projects.

		Usage:
		  $(self) [options] [--] [path]

		Options:
		  -s, --select-one  User will be prompted select one of multiple results.
		  -h, --help        Display this help.

		Path:
		  Search starting point.
		  Default path is the current working directory.
	EOT
}

set_path() {
  [[ -d $1 ]] || die "'$1' is not a directory!"
  path=$1
}

process_args() {
  local -r short_opts=sh
  local -r long_opts=select-one,help
  local args

  args=$(get_args "$short_opts" "$long_opts" "$@")
  eval set -- "$args"

  while true ; do
    case "$1" in
      -s|--select-one) select_one=true; shift ;;
      -h|--help)       print_help; exit ;;
      --)              shift; break ;;
      *)               die_unprocessable_args ;;
    esac
  done

  if [[ $# -ge 1 ]]; then
    set_path "$1"
  fi
}

find_npm_dirs() {
  cd "$path"

  local expression
  local npm_dirs

  mapfile -t expression < <(get-find-expression --lines --ignore-non-sources)
  mapfile -t npm_dirs < <(find . "${expression[@]}" -name package.json -exec dirname {} \;)

  [[ ${#npm_dirs[@]} -gt 0 ]] || die "Unable to find any package.json!"

  if [[ ${#npm_dirs[@]} -gt 1 && $select_one == true ]]; then
    print-selection "${npm_dirs[@]}"
  else
    printf "%s\n" "${npm_dirs[@]}"
  fi
}

function main() {
  local select_one=false
  local path=$PWD

  process_args "$@"
  find_npm_dirs
}

main "$@"
