#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"

readonly FORMAT="--format=%(refname:short)"

help() {
  cat <<-EOT
		List Git branches.

		Usage:
		  $(self) [options]

		Options:
		  -c  Include current branch (-C to exclude).
		  -l  Include local branches.
		  -a  Include local branches that are ahead of remote (-A to exclude).
		  -b  Include local branches that are behind remote (-B to exclude).
		  -g  Include local branches that are gone on remote (-G to exclude).
		  -r  Include remote branches.
		  -s  Print short branch names without remote prefix.
		  -h  Print this help.
	EOT
}

main() {
  local include_current=false
  local exclude_current=false
  local include_local=false
  local include_ahead=false
  local exclude_ahead=false
  local include_behind=false
  local exclude_behind=false
  local include_gone=false
  local exclude_gone=false
  local include_remote=false
  local short_names=false
  local opt

  while getopts ":cClaAbBgGrsh" opt; do
    case "$opt" in
      c) include_current=true ;;
      C) exclude_current=true ;;
      l) include_local=true ;;
      a) include_ahead=true ;;
      A) exclude_ahead=true ;;
      b) include_behind=true ;;
      B) exclude_behind=true ;;
      g) include_gone=true ;;
      G) exclude_gone=true ;;
      r) include_remote=true ;;
      s) short_names=true ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  if [[ $include_current == false
     && $include_local == false
     && $include_gone == false
     && $include_ahead == false
     && $include_behind == false
     && $include_remote == false ]]; then
     die_help "nothing to do"
  fi

  # Check we are in a git repository.
  git status --porcelain >/dev/null



  if [[ $short_names = true ]]; then
    { # We want to print mix of local and remote branches.
      print_included_local
      print_included_remote | remove_remote_prefix
    } | LC_ALL=C sort | uniq | filter_excluded_local
  else
    # We want to print local branches before the remote ones.
    print_included_local | sort | uniq | filter_excluded_local
    print_included_remote | sort
  fi
}

print_included_local() {
  [[ $include_current = true ]] && print_current
  [[ $include_local = true ]] && print_local
  [[ $include_ahead = true ]] && print_ahead
  [[ $include_behind = true ]] && print_behind
  [[ $include_gone = true ]] && print_gone
  true
}

print_excluded_local() {
  [[ $exclude_current = true ]] && print_current
  [[ $exclude_ahead = true ]] && print_ahead
  [[ $exclude_behind = true ]] && print_behind
  [[ $exclude_gone = true ]] && print_gone
  true
}

print_included_remote() {
  [[ $include_remote = true ]] && print_remote
  true
}

print_current() {
  git branch --show-current
}

print_local() {
  git branch $FORMAT | grep --invert-match 'HEAD detached' || true
}

print_remote() {
  git branch --remote $FORMAT | grep --invert-match '/HEAD$' || true
}

print_ahead() {
  print_local | filter_having_revlist_count --left-only
}

print_behind() {
  print_local | filter_having_revlist_count --right-only
}

print_gone() {
  print_local | filter_gone
}

filter_excluded_local() {
  grep --fixed-strings \
       --line-regexp \
       --invert-match \
       --file=<(print_excluded_local) || true
}

filter_having_revlist_count() {
  while IFS= read -r branch; do
    local count
    count=$(git rev-list --count "$1" "$branch...$branch@{upstream}" 2>/dev/null) \
      && [[ $count -gt 0 ]] \
      && echo "$branch"
  done
  true
}

filter_gone() {
  grep --fixed-strings \
       --line-regexp \
       --invert-match \
       --file=<(print_remote | remove_remote_prefix) || true
}

remove_remote_prefix() {
  sed --regexp-extended --expression='s/^[^/]*\///'
}

main "$@"
