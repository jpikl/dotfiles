#!/usr/bin/env sh

install_packages() {
    if [ ! -x "$(command -v fzf)" ]; then
        pm install fzf
    fi
    pm install <~/.config/pkgs/base
}

install_nodejs() {
    FNM_INSTALL_DIR=$HOME/.local/share/fnm

    # Always update to the latest fnm version
    curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "$FNM_INSTALL_DIR" --skip-shell
    export PATH="$PATH:$FNM_INSTALL_DIR"

    eval "$(fnm env)"
    fnm install --lts
    fnm default lts-latest
    fnm use lts-latest
    corepack enable

    if [ -f ~/.config/pkgs/npm ]; then
        xargs -r npm -g install <~/.config/pkgs/npm
    fi
}

install_rust() {
    if [ ! -x "$(command -v rustup)" ]; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    fi

    rustup self update
    rustup install stable
    rustup install nightly

    if [ -f ~/.config/pkgs/cargo ]; then
        xargs -r cargo install <~/.config/pkgs/cargo
    fi
}

generate_ssh_key() {
    DEFAULT_COMMENT=$USER@$(hostname)
    printf "Enter comment (empty for %s): " "$DEFAULT_COMMENT"
    read -r COMMENT
    ssh-keygen -t ed25519 -f ~/.ssh/"id_$1" -a 100 -C "${COMMENT:-$DEFAULT_COMMENT}"
    echo
    echo "Copy the following public key to a remote server:"
    echo
    cat ~/.ssh/"id_$1.pub"
}

switch_dotfiles_to_ssh() {
    dotenv git remote set-url origin git@github.com:jpikl/dotfiles.git
    dotenv git submodule set-url .local/share/pm git@github.com:jpikl/pm.git
}

list_actions() {
    echo "1) Install packages"
    echo "2) Install Node.js toolchain (or update it)"
    echo "3) Install Rust toolchain (or update it)"
    echo "4) Generate SSH key (personal)"
    echo "5) Generate SSH key (work)"
    echo "6) Switch dotfiles to SSH"
}

get_action() {
    case "$1" in
        1) echo install_packages ;;
        2) echo install_nodejs ;;
        3) echo install_rust ;;
        4) echo generate_ssh_key personal ;;
        5) echo generate_ssh_key work ;;
        6) echo switch_dotfiles_to_ssh ;;
    esac
}

while true; do
    list_actions
    echo
    
    while true; do
        printf "Choose action (Ctrl+D to quit): "
        read -r ANSWER

        if [ "$ANSWER" = "" ] || [ "$ANSWER" = q ] || [ "$ANSWER" = Q ]; then
            exit
        fi
        
        ACTION=$(get_action "$ANSWER")

        if [ "$ACTION" ]; then
            echo 
            echo "====================[ $ACTION :: start ]===================="
            echo 
            $ACTION
            echo 
            echo "====================[ $ACTION :: end ]===================="
            echo 
            break;
        fi
    done
done
