#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/system.sh"

readonly VARS_FILENAME=sshctl-vars
readonly LOCK_FILENAME=sshctl-lock

help() {
  cat <<-EOT
		Control ssh-agent process.

		Usage:
		  $(self) [options] <command>

		Options:
		  -h  Print this help.

		Commands:
		  status   Print ssh-agent status (defalt command).
		  start    Start ssh-agent if needed.
		  stop     Stop ssh-agent if needed.
		  restart  Restart ssh-agent.
	EOT
}

main() {
  local opt

  while getopts ":h" opt; do
    case "$opt" in
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))

  local command

  if [[ $# -eq 0 ]]; then
    command=status
  elif [[ $1 =~ ^(status|start|stop|restart)$ ]]; then
    command=$1
  else
    die_help "invalid command"
  fi

  local pid_state
  local sock_state

  exec_command >&2

  if [[ $pid_state == valid && $sock_state == valid ]]; then
    export_vars
  else
    unset_vars
  fi
}

exec_command() {
  if [[ $command == status ]]; then
    check_env
    exit
  fi

  local vars_file
  local lock_file
  local lock_fd

  detect_paths

  if is_command flock; then
    exec {lock_fd}>"$lock_file"
    flock "$lock_fd"
  fi

  check_env

  if [[ $pid_state != valid || $sock_state != valid ]]; then
    load_vars
  fi

  if [[ $command == stop || $command == restart ||
        $pid_state != valid || $sock_state != valid ]]; then
    kill_agent

    if [[ $command == start || $command == restart ]]; then
      start_agent
    fi
  fi

  if is_command flock; then
    flock -u "$lock_fd"
  fi
}

check_env() {
  echo "Checking environment"

  pid_state=$(check_pid)
  sock_state=$(check_sock)
}

check_pid() {
  if [[ ${SSH_AGENT_PID-} ]]; then
    if kill -0 "$SSH_AGENT_PID" &>/dev/null; then
      echo "[ok] SSH_AGENT_PID: $SSH_AGENT_PID" >&2
      echo "valid"
    else
      echo "[invalid] SSH_AGENT_PID: $SSH_AGENT_PID" >&2
      echo "invalid"
    fi
  else
    echo "[unset] SSH_AGENT_PID" >&2
    echo "unset"
  fi
}

check_sock() {
  if [[ ${SSH_AUTH_SOCK-} ]]; then
    if [[ -S $SSH_AUTH_SOCK ]]; then
      echo "[ok] SSH_AUTH_SOCK: $SSH_AUTH_SOCK" >&2
      echo "valid"
    else
      echo "[invalid] SSH_AUTH_SOCK: $SSH_AUTH_SOCK" >&2
      echo "invalid"
    fi
  else
    echo "[unset] SSH_AUTH_SOCK" >&2
    echo "unset"
  fi
}

detect_paths() {
  if [[ -d /run/user/$UID && -w /run/user/$UID ]]; then
    vars_file=/run/user/$UID/$VARS_FILENAME
    lock_file=/run/user/$UID/$LOCK_FILENAME
  elif [[ -d /var/run/user/$UID && -w /var/run/user/$UID ]]; then
    vars_file=/var/run/user/$UID/$VARS_FILENAME
    lock_file=/var/run/user/$UID/$LOCK_FILENAME
  else
    vars_file=/tmp/$VARS_FILENAME-$UID
    lock_file=/tmp/$LOCK_FILENAME-$UID
  fi
}

load_vars() {
  if [[ -f $vars_file ]]; then
    echo "Loading $vars_file"
    source "$vars_file" || true

    pid_state=$(check_pid)
    sock_state=$(check_sock)
  fi
}

export_vars() {
  echo "export SSH_AGENT_PID=$SSH_AGENT_PID;"
  echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK;"
}

unset_vars() {
  echo "unset SSH_AGENT_PID;"
  echo "unset SSH_AUTH_SOCK;"
}

start_agent() {
  echo "Starting agent"
  eval "$(ssh-agent)" >/dev/null

  pid_state=$(check_pid)
  sock_state=$(check_sock)

  if [[ $pid_state == valid && $sock_state == valid ]]; then
    echo "Generating $vars_file"
    export_vars >"$vars_file"
  fi
}

kill_agent() {
  if [[ -f $vars_file ]]; then
    echo "Deleting $vars_file"
    rm "$vars_file"
  fi

  if [[ $pid_state == valid ]]; then
    echo "Killing agent pid $SSH_AGENT_PID"
    kill "$SSH_AGENT_PID"
    pid_state=invalid
  fi

  if [[ $sock_state == valid ]]; then
    echo "Deleting agent socket $SSH_AUTH_SOCK"
    rm -f "$SSH_AUTH_SOCK"
    sock_state=invalid
  fi
}

main "$@"
