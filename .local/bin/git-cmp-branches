#!/usr/bin/env bash

set -euo pipefail

source "$BASH_LIB_DIR/core.sh"
source "$BASH_LIB_DIR/term.sh"

help() {
  cat <<-EOT
		Compare two Git branches.

		Usage:
		  $(self) [<options>] <branch> <others>...

		Args:
		  <branch>     Target branch.
		  <others>...  Branches to compare with target.

		Options:
		  -a  List authors and number of their commits.
		  -c  Force colors in output (-C for no colors).
		  -h  Print this help.
	EOT
}

main() {
  local colors=
  local authors=false
  local opt

  while getopts ":acCh" opt; do
    case "$opt" in
      a) authors=true ;;
      c) colors=true ;;
      C) colors=false ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  shift $((OPTIND - 1))
  [[ $# -ge 2 ]] || die_missing_arg

  if [[ ! $colors ]] ; then
    if term_has_colors; then
      colors=true
    else
      colors=false
    fi
  fi

  local fmt_primary=
  local fmt_secondary=
  local fmt_commits=
  local fmt_clear=

  if [[ $colors = true ]]; then
    fmt_primary=$(tput setaf 5)
    fmt_secondary=$(tput setaf 4)
    fmt_commits=$(tput setaf 2)
    fmt_clear=$(tput sgr0)
  fi

  local branch_1=$1
  local branch_2
  shift

  for branch_2; do
    local commits_1
    local commits_2

    read -r commits_1 commits_2 < <(git rev-list --count --left-right "$branch_1...$branch_2")

    local branch_1_fmt=$fmt_primary$branch_1$fmt_clear
    local branch_2_fmt=$fmt_secondary$branch_2$fmt_clear

    local commits_1_fmt=$fmt_commits$commits_1$fmt_clear
    local commits_2_fmt=$fmt_commits$commits_2$fmt_clear

    echo "$branch_1_fmt has $commits_1_fmt commit(s) that are not in $branch_2_fmt"

    if [[ $authors == true ]]; then
      git authors "$branch_1" --not "$branch_2"
    fi

    echo "$branch_2_fmt has $commits_2_fmt commit(s) that are not in $branch_1_fmt"

    if [[ $authors == true ]]; then
      git authors "$branch_2" --not "$branch_1"
    fi
  done
}

main "$@"
