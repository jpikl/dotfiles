#!/usr/bin/env bash

set -euo pipefail

source ~/.local/lib/bash/core.sh
source ~/.local/lib/bash/term.sh

help() {
  cat <<-EOT
		Compare Git revisions.

		Usage:
		  $(self) [<options>] <revision> <others>...

		Args:
		  <revision>...  Target revision.
		  <others>...    Revisions to compare with.

		Options:
		  -l  Print only left side of comparison.
		  -r  Print only right side of comparison.
		  -a  Print authors and number of their commits.
		  -c  Force colors in output (-C for no colors).
		  -h  Print this help.
	EOT
}

main() {
  local left=true
  local right=true
  local colors=
  local authors=false
  local opt

  while getopts ":lracCh" opt; do
    case "$opt" in
      l) right=false ;;
      r) left=false ;;
      a) authors=true ;;
      c) colors=true ;;
      C) colors=false ;;
      h) help; exit ;;
      *) die_invalid_opt "$opt" ;;
    esac
  done

  if [[ $left = false && $right = false ]]; then
    die_help "options -l -r are mutually exclusive"
  fi

  shift $((OPTIND - 1))
  [[ $# -ge 2 ]] || die_missing_arg

  if [[ ! $colors ]] ; then
    if term_has_colors; then
      colors=true
    else
      colors=false
    fi
  fi

  local fmt_primary=
  local fmt_secondary=
  local fmt_commits=
  local fmt_clear=

  if [[ $colors = true ]]; then
    fmt_primary=$(tput setaf 5)
    fmt_secondary=$(tput setaf 4)
    fmt_commits=$(tput setaf 2)
    fmt_clear=$(tput sgr0)
  fi

  local revision_1=$1
  local revision_2
  shift

  for revision_2; do
    local commits_1
    local commits_2

    read -r commits_1 commits_2 < <(git rev-list --count --left-right "$revision_1...$revision_2")

    local revision_1_fmt=$fmt_primary$revision_1$fmt_clear
    local revision_2_fmt=$fmt_secondary$revision_2$fmt_clear

    local commits_1_fmt=$fmt_commits$commits_1$fmt_clear
    local commits_2_fmt=$fmt_commits$commits_2$fmt_clear

    if [[ $left = true ]]; then
      echo "$revision_1_fmt has $commits_1_fmt commit(s) that are not in $revision_2_fmt"

      if [[ $authors == true ]]; then
        git authors "$revision_1" --not "$revision_2"
      fi
    fi

    if [[ $right = true ]]; then
      echo "$revision_2_fmt has $commits_2_fmt commit(s) that are not in $revision_1_fmt"

      if [[ $authors == true ]]; then
        git authors "$revision_2" --not "$revision_1"
      fi
    fi
  done
}

main "$@"
