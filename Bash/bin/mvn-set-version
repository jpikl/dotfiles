#!/usr/bin/env bash

# shellcheck source=utils.sh
source "$BASH_DIR/utils.sh"

print_help() {
  local -r self=$(basename "$0")

  echo "Set version of a maven project."
  echo
  echo "Usage:"
  echo "  $self [options] <version>"
  echo
  echo "Options:"
  echo "  -b, --backup   Create backup of original pom.xml files."
  echo "  -v, --verbose  Verbose mode with additional output."
  echo "  -h, --help     Display this help."
  echo
  echo "Version:"
  echo "  New version to set."
}

set_version() {
  is_printable "$1" || die "Version must not be blank!"
  version=$1
}

process_args() {
  require_gnu_getopt

  local -r short_opts=bvh
  local -r long_opts=backup,verbose,help
  local help=false
  local args

  args=$(get_args "$short_opts" "$long_opts" "$@") || die_invalid_usage
  eval set -- "$args"

  while true ; do
    case "$1" in
      -b|--backup)  backup=true; shift ;;
      -v|--verbose) verbose=true; shift ;;
      -h|--help)    help=true; shift ;;
      --)           shift; break ;;
      *)            die "Unable to process arguments!" ;;
    esac
  done

  if [[ $help = true || $# -eq 0 ]]; then
    print_help
    exit
  fi

  set_version "$1"
}

mvn_set_version() {
  local args=()

  if [[ $verbose = false ]]; then
    args+=("--quiet")
  fi

  args+=("versions:set" "-DgenerateBackupPoms=$backup")

  if [[ $version ]]; then
    args+=("-DnewVersion=$version")
  fi

  mvn "${args[@]}"
}

function main() {
  local backup=false
  local verbose=false
  local version

  process_args "$@"
  mvn_set_version
}

main "$@"
